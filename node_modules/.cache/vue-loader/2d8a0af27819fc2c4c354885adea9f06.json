{"remainingRequest":"E:\\fate\\federal-study-vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\fate\\federal-study-vue\\node_modules\\@bairong\\jax\\src\\components\\authorization\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\fate\\federal-study-vue\\node_modules\\@bairong\\jax\\src\\components\\authorization\\index.vue","mtime":499162500000},{"path":"E:\\fate\\federal-study-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\fate\\federal-study-vue\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\fate\\federal-study-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\fate\\federal-study-vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Cookies from 'js-cookie';\nimport Qs from 'qs';\nimport { mapGetters } from 'vuex';\nexport default {\n  name: 'Authorization',\n  props: {\n    value: { type: Boolean, default: false },\n    title: { type: String, default: '授权范围' },\n    submitUrl: { type: String, default: '' }\n  },\n  data () {\n    return {\n      loading: false,\n      isStrategyOp: false,\n      isHas: true,\n      save_loading: false,\n      visible: this.value,\n      formParams: { id: '', ownerId: '', selectionTableArr: [] },\n      strategyParams: {\n        group: '', // 策略分组 贷前loanBefore，loanBeforeRisk，贷中 loan，loanRisk，信息验证verify，verifyRisk\n        ownerId: '', // ID\n        ownerName: '', // 名称\n        strategyGroups: [], // 策略分组\n        strategyId: 1, // 策略ID\n        strategyCode: '', // 策略Code\n        strategyName: '' // 策略名称\n      },\n      ruleInline: {\n        ownerId: [{ required: true, message: '该项为必选项！' }]\n        // selectionTableArr: [{ required: true, type: 'array', min: 1, message: '请至少选择一项', trigger: 'change' }]\n      },\n      authStrategyCfg: {\n        group: 'loanRisk',\n        strategyCode: 'STRB0000053',\n        strategyId: '217',\n        strategyName: '测试数据01'\n      },\n      authStrategyCfg193: {\n        group: 'loanRisk',\n        strategyCode: 'STRB0000002',\n        strategyId: '41',\n        strategyName: '新建策略二'\n      },\n      authStrategyData: {\n        userList: []\n      },\n      options: {\n        method: 'GET',\n        headers: { 'Accept': 'application/json', 'Content-Type': 'application/json' },\n        credentials: 'same-origin', // 'same-origin', include\n        mode: 'cors',\n        cache: 'force-cache'\n      },\n      columns: [\n        {\n          title: '权限组名称',\n          renderHeader: (h, params) => {\n            return h('label', params.column.title);\n          },\n          // render: (h, params) => {\n          //   return h('div', [\n          //     h('Checkbox', {\n          //       props: {\n          //         label: params.row.name,\n          //         size: 'small'\n          //       },\n          //       style: {\n          //         marginRight: '5px'\n          //       },\n          //       on: {\n          //         click: () => {\n          //           this.show(params.index)\n          //         }\n          //       }\n          //     }, params.row.name)\n          //   ]);\n          // },\n          key: 'name'\n        },\n        {\n          // type: 'selection',\n          title: '读权限',\n          renderHeader: (h, params) => {\n            // console.log(h, params);\n            return h('label', params.column.title);\n          },\n          align: 'center',\n          children: [\n            {\n              title: '读权限',\n              type: 'selection',\n              key: 'rangeType',\n              // className: 'def-show-column',\n              align: 'center'\n              // },\n              // {\n              //   title: 'Company Name',\n              //   key: 'cname',\n              //   align: 'center',\n              //   width: 100\n            }\n          ]\n        }\n      ],\n      strategyDataGroup: [],\n      strategyDataGroup1: [\n        {\n          name: '组1',\n          rangeType: 2\n        },\n        {\n          name: '组2',\n          rangeType: 1\n        }\n      ]\n    };\n  },\n  computed: {\n    ...mapGetters('user/', { authData: 'authData' })\n  },\n  methods: {\n    uniqueArr (array) {\n      // 数组去重\n      var n = []; // 一个新的临时数组 uid\n      var keyObj = {};\n      array.forEach((item) => {\n        keyObj[item.uid] = item;\n      });\n      Object.keys(keyObj).forEach(function (key) {\n        n.push(keyObj[key]);\n      });\n      return n;\n    },\n    initData () {\n      const { permissionGroups } = this.authData || {};\n      const { adminUser, dataGroupUser } = permissionGroups || {};\n      let adminUserArr = adminUser || [];\n      let concatNoUniqueArr = adminUserArr.concat(dataGroupUser || []);\n      // this.authStrategyData.userList = (permissionGroups && permissionGroups.dataGroupUser) || [];\n      this.authStrategyData.userList = this.uniqueArr(concatNoUniqueArr);\n      if (this.authStrategyData.userList && !this.authStrategyData.userList.length) {\n        this.$Message.error('用户所在组数据为空错误！');\n      }\n    },\n    initStrategy () {\n      this.loading = true;\n      this.options.method = 'GET';\n      let url = '/api/auth-service/resourceStrategy/strategyMessage';\n      if (this.options.method === 'GET') {\n        url = url + '?' + Qs.stringify(this.getSid()) + '&' + Qs.stringify(this.authStrategyCfg);\n        delete this.options.body;\n      } else {\n        this.options.body = Qs.stringify(this.getSid()) + '&' + Qs.stringify(this.authStrategyCfg);\n      }\n      fetch(url, this.options)\n        .then(response => response.json())\n        .then(({ code, data, message }) => {\n          this.loading = false;\n          if (code === '000000') {\n            this.authStrategyData = data;\n            if (this.authStrategyData && this.authStrategyData.userList && !this.authStrategyData.userList.length) {\n              this.$Message.error('用户所在组数据为空错误！');\n            }\n            // 0: 读写；1，读；2，写 (默认只有 1：读 的权限)  其他的就是没有勾选的状态\n            let singleSelectArr = []; // 选中状态条件\n            this.authStrategyData && this.authStrategyData.groups && this.authStrategyData.groups.map((item) => {\n              item.isReadSelected = false;\n              item.isWriteSelected = false;\n              item._checked = false;\n              if (item.rangeType === 0 || item.rangeType === 1) {\n                item.isReadSelected = true; // 读 选中\n                item._checked = true;\n                let obj = {\n                  id: item.id,\n                  name: item.name,\n                  rangeType: item.rangeType\n                };\n                singleSelectArr.push(obj);\n              }\n            });\n            this.formParams.selectionTableArr = singleSelectArr;\n            this.strategyParams.strategyGroups = singleSelectArr;\n            this.strategyDataGroup = this.authStrategyData.groups || [];\n          } else {\n            this.$Message.error(message || '服务器错误！');\n          }\n        }, reason => {\n          this.$Message.error(reason || '服务器错误！');\n        });\n    },\n    getSid (sessionId = Cookies.get('BR_COMPASS_SESSIONID')) {\n      return { sessionId, t: Date.now() };\n    },\n    setId ({ id }) {\n      this.formParams.id = id;\n    },\n    selectUserData (selectData) {\n      if (selectData && selectData.value) {\n        // console.log(200, this.formParams.ownerId, selectData.value);\n        this.strategyParams.ownerId = selectData.value;\n        this.strategyParams.ownerName = selectData.label;\n      }\n    },\n    selectRetryHandle (selectionArr) {\n      let singleSelectArr = [];\n      selectionArr.map(sItem => {\n        let obj = {\n          id: sItem.id,\n          name: sItem.name,\n          rangeType: sItem.rangeType\n        };\n        singleSelectArr.push(obj);\n      });\n      this.formParams.selectionTableArr = selectionArr;\n      this.strategyParams.strategyGroups = singleSelectArr;\n    },\n    resetParams () {\n      this.save_loading = false;\n    },\n    strategySubmit () {\n      this.strategyParams.group = this.authStrategyCfg.group;\n      this.strategyParams.strategyId = this.authStrategyCfg.strategyId;\n      this.strategyParams.strategyCode = this.authStrategyCfg.strategyCode;\n      this.strategyParams.strategyName = this.authStrategyCfg.strategyName;\n      // this.options.body = Qs.stringify(this.getSid()) + '&' + Qs.stringify(this.strategyParams);\n      this.options.body = JSON.stringify(this.strategyParams); // obj = JSON.parse(obj);\n      this.options.method = 'POST';\n      this.options.headers = { 'Accept': 'application/json', 'Content-Type': 'application/json' };\n      let url = '/api/auth-service/resourceStrategy/changeOwner' + '?' + Qs.stringify(this.getSid());\n      this.saveFetch(url, this.options);\n    },\n    submit () {\n      let { id, ownerId } = this.formParams;\n      this.options.body = Qs.stringify({ id, ownerId, ...this.getSid() });\n      this.options.method = 'POST';\n      this.options.headers = { 'Content-Type': 'application/x-www-form-urlencoded' };\n      this.saveFetch(this.submitUrl, this.options);\n    },\n    saveFetch (url, options) {\n      fetch(url, options)\n        .then(response => response.json())\n        .then(({ code, message }) => {\n          if (code === '00' || code === '000000') {\n            this.$Message.success(`保存${message}！`);\n            this.$emit('save-success');\n            this.cancel();\n          } else {\n            this.$Message.error(message || '服务器错误！');\n            this.resetParams();\n          }\n        }, reason => {\n          this.$Message.error(reason || '服务器错误！');\n          this.resetParams();\n        });\n    },\n    ok () {\n      this.save_loading = true;\n      this.$refs.authForm.validate(valid => {\n        // valid ? this.submit() : (this.save_loading = false);\n        valid ? (this.isStrategyOp ? this.strategySubmit() : this.submit()) : (this.save_loading = false);\n      });\n    },\n    cancel () {\n      this.visible = false;\n      this.$emit('input', false);\n      this.$refs.authForm.resetFields();\n      this.resetParams();\n    }\n  },\n  watch: {\n    value (v) {\n      this.visible = v;\n    }\n  },\n  mounted () {\n    const { id } = this.authData || {};\n    this.$parent.$on('authorization', (evt) => {\n      this.formParams.ownerId = id;\n      this.isStrategyOp = false;\n      this.setId(evt);\n      this.initData();\n    });\n    this.$parent.$on('authStrategyEvent', (evt) => {\n      this.formParams.ownerId = id;\n      this.isStrategyOp = true;\n      this.authStrategyCfg.group = evt.group;\n      this.authStrategyCfg.strategyId = evt.strategyId;\n      this.authStrategyCfg.strategyCode = evt.strategyCode;\n      this.authStrategyCfg.strategyName = evt.strategyName;\n      this.initStrategy();\n      this.$forceUpdate();\n    });\n  }\n};\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAufile":"index.vue","sourceRoot":"node_modules/@bairong/jax/src/components/authorization","sourcesContent":["<template>\n  <Modal v-model=\"visible\" :title=\"title\" @on-cancel=\"cancel\">\n    <Form ref=\"authForm\" :model=\"formParams\" :rules=\"ruleInline\">\n      <FormItem  :label-width=\"100\" prop=\"ownerId\" label=\"变更所有者\">\n        <Select v-model=\"formParams.ownerId\" :label-in-value=\"true\" @on-change=\"selectUserData\" style=\"width:300px\" placeholder=\"请选择\">\n          <Option v-for=\"item in authStrategyData.userList\" :value=\"item.uid\" :key=\"item.uid\">{{ item.userName }}</Option>\n        </Select>\n      </FormItem>\n      <FormItem v-if=\"isStrategyOp\" :label-width=\"100\" label=\"读权限\">\n        <Table height=\"300\" border ref=\"selection\" :columns=\"columns\" :loading=\"loading\" :data=\"strategyDataGroup\" @on-selection-change=\"selectRetryHandle\"></Table>\n      </FormItem>\n      <!--<FormItem v-if=\"isStrategyOp\" prop=\"selectionTableArr\" :label-width=\"100\" label=\"读权限\">-->\n        <!--<Table height=\"300\" border ref=\"selection\" :columns=\"columns\" :data=\"strategyDataGroup\" @on-selection-change=\"selectRetryHandle\"></Table>-->\n      <!--</FormItem>-->\n    </Form>\n    <template slot=\"footer\">\n      <Button type=\"primary\" :loading=\"save_loading\" @click=\"ok\">保存</Button>\n      <Button type=\"text\" @click=\"cancel\">取消</Button>\n    </template>\n  </Modal>\n</template>\n\n<script>\nimport Cookies from 'js-cookie';\nimport Qs from 'qs';\nimport { mapGetters } from 'vuex';\nexport default {\n  name: 'Authorization',\n  props: {\n    value: { type: Boolean, default: false },\n    title: { type: String, default: '授权范围' },\n    submitUrl: { type: String, default: '' }\n  },\n  data () {\n    return {\n      loading: false,\n      isStrategyOp: false,\n      isHas: true,\n      save_loading: false,\n      visible: this.value,\n      formParams: { id: '', ownerId: '', selectionTableArr: [] },\n      strategyParams: {\n        group: '', // 策略分组 贷前loanBefore，loanBeforeRisk，贷中 loan，loanRisk，信息验证verify，verifyRisk\n        ownerId: '', // ID\n        ownerName: '', // 名称\n        strategyGroups: [], // 策略分组\n        strategyId: 1, // 策略ID\n        strategyCode: '', // 策略Code\n        strategyName: '' // 策略名称\n      },\n      ruleInline: {\n        ownerId: [{ required: true, message: '该项为必选项！' }]\n        // selectionTableArr: [{ required: true, type: 'array', min: 1, message: '请至少选择一项', trigger: 'change' }]\n      },\n      authStrategyCfg: {\n        group: 'loanRisk',\n        strategyCode: 'STRB0000053',\n        strategyId: '217',\n        strategyName: '测试数据01'\n      },\n      authStrategyCfg193: {\n        group: 'loanRisk',\n        strategyCode: 'STRB0000002',\n        strategyId: '41',\n        strategyName: '新建策略二'\n      },\n      authStrategyData: {\n        userList: []\n      },\n      options: {\n        method: 'GET',\n        headers: { 'Accept': 'application/json', 'Content-Type': 'application/json' },\n        credentials: 'same-origin', // 'same-origin', include\n        mode: 'cors',\n        cache: 'force-cache'\n      },\n      columns: [\n        {\n          title: '权限组名称',\n          renderHeader: (h, params) => {\n            return h('label', params.column.title);\n          },\n          // render: (h, params) => {\n          //   return h('div', [\n          //     h('Checkbox', {\n          //       props: {\n          //         label: params.row.name,\n          //         size: 'small'\n          //       },\n          //       style: {\n          //         marginRight: '5px'\n          //       },\n          //       on: {\n          //         click: () => {\n          //           this.show(params.index)\n          //         }\n          //       }\n          //     }, params.row.name)\n          //   ]);\n          // },\n          key: 'name'\n        },\n        {\n          // type: 'selection',\n          title: '读权限',\n          renderHeader: (h, params) => {\n            // console.log(h, params);\n            return h('label', params.column.title);\n          },\n          align: 'center',\n          children: [\n            {\n              title: '读权限',\n              type: 'selection',\n              key: 'rangeType',\n              // className: 'def-show-column',\n              align: 'center'\n              // },\n              // {\n              //   title: 'Company Name',\n              //   key: 'cname',\n              //   align: 'center',\n              //   width: 100\n            }\n          ]\n        }\n      ],\n      strategyDataGroup: [],\n      strategyDataGroup1: [\n        {\n          name: '组1',\n          rangeType: 2\n        },\n        {\n          name: '组2',\n          rangeType: 1\n        }\n      ]\n    };\n  },\n  computed: {\n    ...mapGetters('user/', { authData: 'authData' })\n  },\n  methods: {\n    uniqueArr (array) {\n      // 数组去重\n      var n = []; // 一个新的临时数组 uid\n      var keyObj = {};\n      array.forEach((item) => {\n        keyObj[item.uid] = item;\n      });\n      Object.keys(keyObj).forEach(function (key) {\n        n.push(keyObj[key]);\n      });\n      return n;\n    },\n    initData () {\n      const { permissionGroups } = this.authData || {};\n      const { adminUser, dataGroupUser } = permissionGroups || {};\n      let adminUserArr = adminUser || [];\n      let concatNoUniqueArr = adminUserArr.concat(dataGroupUser || []);\n      // this.authStrategyData.userList = (permissionGroups && permissionGroups.dataGroupUser) || [];\n      this.authStrategyData.userList = this.uniqueArr(concatNoUniqueArr);\n      if (this.authStrategyData.userList && !this.authStrategyData.userList.length) {\n        this.$Message.error('用户所在组数据为空错误！');\n      }\n    },\n    initStrategy () {\n      this.loading = true;\n      this.options.method = 'GET';\n      let url = '/api/auth-service/resourceStrategy/strategyMessage';\n      if (this.options.method === 'GET') {\n        url = url + '?' + Qs.stringify(this.getSid()) + '&' + Qs.stringify(this.authStrategyCfg);\n        delete this.options.body;\n      } else {\n        this.options.body = Qs.stringify(this.getSid()) + '&' + Qs.stringify(this.authStrategyCfg);\n      }\n      fetch(url, this.options)\n        .then(response => response.json())\n        .then(({ code, data, message }) => {\n          this.loading = false;\n          if (code === '000000') {\n            this.authStrategyData = data;\n            if (this.authStrategyData && this.authStrategyData.userList && !this.authStrategyData.userList.length) {\n              this.$Message.error('用户所在组数据为空错误！');\n            }\n            // 0: 读写；1，读；2，写 (默认只有 1：读 的权限)  其他的就是没有勾选的状态\n            let singleSelectArr = []; // 选中状态条件\n            this.authStrategyData && this.authStrategyData.groups && this.authStrategyData.groups.map((item) => {\n              item.isReadSelected = false;\n              item.isWriteSelected = false;\n              item._checked = false;\n              if (item.rangeType === 0 || item.rangeType === 1) {\n                item.isReadSelected = true; // 读 选中\n                item._checked = true;\n                let obj = {\n                  id: item.id,\n                  name: item.name,\n                  rangeType: item.rangeType\n                };\n                singleSelectArr.push(obj);\n              }\n            });\n            this.formParams.selectionTableArr = singleSelectArr;\n            this.strategyParams.strategyGroups = singleSelectArr;\n            this.strategyDataGroup = this.authStrategyData.groups || [];\n          } else {\n            this.$Message.error(message || '服务器错误！');\n          }\n        }, reason => {\n          this.$Message.error(reason || '服务器错误！');\n        });\n    },\n    getSid (sessionId = Cookies.get('BR_COMPASS_SESSIONID')) {\n      return { sessionId, t: Date.now() };\n    },\n    setId ({ id }) {\n      this.formParams.id = id;\n    },\n    selectUserData (selectData) {\n      if (selectData && selectData.value) {\n        // console.log(200, this.formParams.ownerId, selectData.value);\n        this.strategyParams.ownerId = selectData.value;\n        this.strategyParams.ownerName = selectData.label;\n      }\n    },\n    selectRetryHandle (selectionArr) {\n      let singleSelectArr = [];\n      selectionArr.map(sItem => {\n        let obj = {\n          id: sItem.id,\n          name: sItem.name,\n          rangeType: sItem.rangeType\n        };\n        singleSelectArr.push(obj);\n      });\n      this.formParams.selectionTableArr = selectionArr;\n      this.strategyParams.strategyGroups = singleSelectArr;\n    },\n    resetParams () {\n      this.save_loading = false;\n    },\n    strategySubmit () {\n      this.strategyParams.group = this.authStrategyCfg.group;\n      this.strategyParams.strategyId = this.authStrategyCfg.strategyId;\n      this.strategyParams.strategyCode = this.authStrategyCfg.strategyCode;\n      this.strategyParams.strategyName = this.authStrategyCfg.strategyName;\n      // this.options.body = Qs.stringify(this.getSid()) + '&' + Qs.stringify(this.strategyParams);\n      this.options.body = JSON.stringify(this.strategyParams); // obj = JSON.parse(obj);\n      this.options.method = 'POST';\n      this.options.headers = { 'Accept': 'application/json', 'Content-Type': 'application/json' };\n      let url = '/api/auth-service/resourceStrategy/changeOwner' + '?' + Qs.stringify(this.getSid());\n      this.saveFetch(url, this.options);\n    },\n    submit () {\n      let { id, ownerId } = this.formParams;\n      this.options.body = Qs.stringify({ id, ownerId, ...this.getSid() });\n      this.options.method = 'POST';\n      this.options.headers = { 'Content-Type': 'application/x-www-form-urlencoded' };\n      this.saveFetch(this.submitUrl, this.options);\n    },\n    saveFetch (url, options) {\n      fetch(url, options)\n        .then(response => response.json())\n        .then(({ code, message }) => {\n          if (code === '00' || code === '000000') {\n            this.$Message.success(`保存${message}！`);\n            this.$emit('save-success');\n            this.cancel();\n          } else {\n            this.$Message.error(message || '服务器错误！');\n            this.resetParams();\n          }\n        }, reason => {\n          this.$Message.error(reason || '服务器错误！');\n          this.resetParams();\n        });\n    },\n    ok () {\n      this.save_loading = true;\n      this.$refs.authForm.validate(valid => {\n        // valid ? this.submit() : (this.save_loading = false);\n        valid ? (this.isStrategyOp ? this.strategySubmit() : this.submit()) : (this.save_loading = false);\n      });\n    },\n    cancel () {\n      this.visible = false;\n      this.$emit('input', false);\n      this.$refs.authForm.resetFields();\n      this.resetParams();\n    }\n  },\n  watch: {\n    value (v) {\n      this.visible = v;\n    }\n  },\n  mounted () {\n    const { id } = this.authData || {};\n    this.$parent.$on('authorization', (evt) => {\n      this.formParams.ownerId = id;\n      this.isStrategyOp = false;\n      this.setId(evt);\n      this.initData();\n    });\n    this.$parent.$on('authStrategyEvent', (evt) => {\n      this.formParams.ownerId = id;\n      this.isStrategyOp = true;\n      this.authStrategyCfg.group = evt.group;\n      this.authStrategyCfg.strategyId = evt.strategyId;\n      this.authStrategyCfg.strategyCode = evt.strategyCode;\n      this.authStrategyCfg.strategyName = evt.strategyName;\n      this.initStrategy();\n      this.$forceUpdate();\n    });\n  }\n};\n</script>\n"]}]}