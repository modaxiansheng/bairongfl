{"remainingRequest":"E:\\bairongfl\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\bairongfl\\node_modules\\@bairong\\jax\\src\\components\\rules\\RuleAddEdit.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\bairongfl\\node_modules\\@bairong\\jax\\src\\components\\rules\\RuleAddEdit.vue","mtime":499162500000},{"path":"E:\\bairongfl\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\bairongfl\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\bairongfl\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\bairongfl\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\bairongfl\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/**\n * 参数说明：\n * titleName 标题名称  如  编辑规则\n * isAddHandle 当前操作是新建 true、编辑 false、查看'check'。\n *\n *\n */\nexport default {\n  name: 'RuleAddEdit',\n  props: ['titleName', 'isAddHandle', 'ruleType', 'version', 'typeName', 'itemData', 'rulesetKey'],\n  data () {\n    const validateCascade = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error('Please enter your password'));\n      } else {\n        if (value === 2) {\n          callback(new Error('输入值过短！'));\n        } else if (value > 2) {\n          callback(new Error('输入值过长！'));\n        }\n        callback(new Error('值过长！'));\n      }\n      callback();\n    };\n    const validatePass = (para, rule, value, callback) => {\n      callback();\n    };\n    const validateRuleName = (rule, value, callback) => {\n      const pattern = /^[a-zA-Z0-9_-|\\u4E00-\\u9FA5]|\\S\\s{4,56}$/;\n      if (value) {\n        if (!pattern.test(value.trim())) {\n          callback(new Error('规则名称不可包含特殊字符，且不能少于四位字符！'));\n        }\n      }\n      callback();\n    };\n    return {\n      ddd: {validator: validatePass.bind(this, 55), message: '565', trigger: 'change'},\n      isShowValidator: false,\n      cfgRule: {},\n      buttonAnd: '且',\n      buttonOr: '或',\n      logicIndex: 0,\n      proList: [{\n        value: '1',\n        label: '注册'\n      }, {\n        value: '2',\n        label: '登录'\n      }, {\n        value: '3',\n        label: '借款'\n      }, {\n        value: '4',\n        label: '提现'\n      }],\n      selectOperator: [\n        {label: '=', value: '=='},\n        {label: '>', value: '>'},\n        {label: '>=', value: '>='},\n        {label: '<', value: '<'},\n        {label: '<=', value: '<='}\n      ],\n      platformList: [{\n        value: '1',\n        label: 'WEB'\n      }, {\n        value: '2',\n        label: 'IOS'\n      }, {\n        value: '3',\n        label: 'Android'\n      }],\n      isShowLog: false,\n      loading: false,\n      formRule: {\n        ruleset: '',\n        ruleCode: '',\n        ruleName: '',\n        remark: '',\n        priority: '',\n        status: '',\n        ruleTypeStatus: 1, /// ruleTypeStatus Filter 0:预置规则，1:自定义规则\n        ruleLogicList: [{\n          cascade: [],\n          field: '',\n          leftBracks: false,\n          rightBracks: false,\n          logic: '&&',\n          operator: '',\n          param: '',\n          paramMax: Infinity,\n          paramMin: -Infinity,\n          value: 0,\n          isOpen: 1,\n          index: 1\n        }],\n        selectItems: [],\n        items: [{\n          value: '',\n          index: 1,\n          isOpen: 1\n        }]\n      },\n      ruleValidate: {\n        ruleset: [{\n          required: true,\n          message: '归属规则集是必填项',\n          trigger: 'blur'\n        }, {\n          type: 'array',\n          max: 2,\n          message: 'Choose two hobbies at best',\n          trigger: 'change'\n        }\n\n        ],\n        ruleCode: [{\n          required: false,\n          message: '规则编号是必填项',\n          trigger: 'blur'\n        }, {\n          type: 'email',\n          message: 'Incorrect email format',\n          trigger: 'blur'\n        }],\n        ruleName: [{\n          required: true,\n          message: '规则名称是必填项',\n          trigger: 'blur'\n        }, {\n          // pattern: /^[a-zA-Z0-9_-|\\u4E00-\\u9FA5]|\\S\\s{4,56}$/,\n          // message: '规则名称不可包含特殊字符，且不能少于四位字符！',\n          validator: validateRuleName,\n          trigger: 'blur'\n        }\n          // {type: \"string\", required: true, pattern: schema.pattern.email}\n        ],\n        remark: [{\n          required: false,\n          max: 100,\n          message: '规则说明长度最多100个汉字',\n          trigger: 'blur'\n        }],\n        priority: [\n          {\n            // pattern: /^([1-9]|[12]\\d)$,\n            pattern: /^100$|^([0-9]|[0-9]\\d)$/,\n            required: true,\n            message: '规则权重不能空且只能为小于等于100的数字！',\n            trigger: 'change'\n          }\n        ],\n        status: [{\n          required: true,\n          type: 'string',\n          message: '规则状态是必填项',\n          trigger: 'change'\n        }],\n        cascade0: [\n          { required: true, pattern: /^\\s+$/g, message: 'The name cannot be empty000001', trigger: 'change' }\n        ],\n        cascade1: [\n          { required: true, type: 'array', message: 'The name cannot be empty11', trigger: 'change' }\n        ],\n        cascade2: [\n          { required: true, validator: validateCascade, message: 'The name cannot be empty22', trigger: 'change' }\n        ],\n        param: [\n          { validator: validateCascade, trigger: 'blur' }\n        ],\n        cascade: [\n          { validator: validateCascade, trigger: 'blur' }\n        ],\n        ruleLogicList: [{\n          required: true,\n          type: 'array',\n          message: '请选择输入值',\n          trigger: 'change'\n        }]\n      }\n    };\n  },\n  components: {\n  },\n  created () {\n    /* 接收新建规则事件 */\n    this.$on('createRuleDataEvent', (evt) => {\n      /// 每次更改数据watch：itemData都会调用init，添加时不传 ;ruleCode 中有\"_yz\"时只传id,ruleCode,priority,---status,\n      if (this.isAddHandle) {\n        this.logicIndex = 0; // 只在创建的时候用\n      }\n      this.init();\n      this.$forceUpdate();\n    });\n  },\n  methods: {\n    init: function () {\n      // 使用props传递数据  itemData\n      // 添加时不传 ;ruleCode 中有\"_yz\"时只传id,ruleCode,priority,---status,\n      if (this.rulesetKey) {\n        this.formRule = this.itemData;\n        this.formRule.statusCopy = typeof this.formRule.statue === 'boolean' ? this.formRule.status : this.formRule.status === 1;// 1启用 0不启用\n        if (this.formRule.jsonstr && this.formRule.jsonstr !== '') {\n          this.formRule.jsonObj = this.formRule.jsonstr ? JSON.parse(this.formRule.jsonstr) : {};\n          let jsonVal = this.formRule.jsonObj;\n          let length = jsonVal.fields ? jsonVal.fields.length : 0;\n\n          /// 逻辑符号 把数据库中 两个以上 这种 [\"||\",\"\"] 修改为 [\"\",\"||\"]\n          let logicsArr = jsonVal.logics;\n          if (logicsArr && logicsArr.length >= 2) {\n            logicsArr.unshift(logicsArr[logicsArr.length - 1]); // 从最后添加到第一个位置\n            logicsArr.pop(); // 把最后一个符号删除掉\n          } else {\n            logicsArr = jsonVal.logics;\n          }\n          jsonVal.logicArr = logicsArr;\n\n          let ruleLogicList = [];\n          for (var i = 0; i < length; i++) {\n            let ruleLogic = {};\n            ruleLogic.leftBracks = !!/^\\(/g.test(jsonVal.fields[i]); // 括号\n            ruleLogic.rightBracks = !!/\\)$/g.test(jsonVal.fields[i]); // 括号\n            ruleLogic.field = jsonVal.fields[i].match(/([^()]+)/g)[0];\n            ruleLogic.operator = jsonVal.operators[i];\n            ruleLogic.cascade = [ruleLogic.field, ruleLogic.operator];\n\n            ruleLogic.logic = jsonVal.logicArr[i];\n\n            ruleLogic.param = parseFloat(jsonVal.params[i]) + '';\n\n            ruleLogic.index = i;\n            ruleLogic.isOpen = 1; // 逻辑删除标识  一条\n            ruleLogic.value = i + i + i;\n\n            ruleLogicList.push(ruleLogic);\n          }\n          setTimeout(() => {\n            this.formRule.ruleLogicList = ruleLogicList;\n            this.logicIndex = ruleLogicList.length > 1 ? ruleLogicList.length - 1 : 0;\n            if (this.isAddHandle === 'check') {\n              this.ruleLogicLabelHandle();\n            }\n            this.updateData();\n          }, 50);\n        }\n\n        this.formRule.items = [\n          {\n            value: '',\n            index: 1,\n            logic: '&&',\n            isOpen: 1\n          }\n        ];\n        this.formRule.selectOperator = this.selectOperator;\n\n        let selectItems_ = [];\n\n        for (var i = 0; i < this.rulesetKey.length; i++) {\n          let operatorArr = [];// 每个规则变量对应的  一组操作符\n          let arr = (this.rulesetKey[i].logs && this.rulesetKey[i].logs.split(',')) || [];\n          if (/.+\\,$/g.test(this.rulesetKey[i].logs)) {\n            arr.pop(); // 去除尾部 ,\n          }\n          arr.forEach(function (v, j) {\n            let value = '';\n            if (v === '=') {\n              value = '==';\n            } else {\n              value = v;\n            }\n            let tempObj = {label: v, value: value};\n            operatorArr.push(tempObj);\n          });\n\n          let selectItem_ = {\n            index: i,\n            label: this.rulesetKey[i].key_name,\n            value: this.rulesetKey[i].rule_key,\n            datalogs: this.rulesetKey[i].logs,\n            children: operatorArr,\n            dataparas: this.rulesetKey[i].paras\n          };\n          selectItems_.push(selectItem_);\n        }\n\n        this.formRule.selectItems = selectItems_;\n\n        this.$forceUpdate();\n      }\n    },\n    handleAdd () {\n      this.logicIndex++;\n      this.formRule.ruleLogicList.push({\n        cascade: [],\n        field: '',\n        leftBracks: false,\n        rightBracks: false,\n        logic: '&&',\n        operator: '',\n        param: '',\n        paramMax: Infinity,\n        paramMin: -Infinity,\n        value: 0,\n        index: this.logicIndex,\n        isOpen: 1\n      });\n\n      this.$forceUpdate();\n    },\n\n    handleRemove (index) {\n      this.formRule.ruleLogicList[index].isOpen = 0;\n      let delIndexMin = false; // 当点击是最小顺序号  且  是打开的 ，进行逻辑显示\n      for (let i = 0; i < index; i++) {\n        if (this.formRule.ruleLogicList[i].isOpen === 1) {\n          delIndexMin = true;\n          break;\n        }\n      }\n      if (!delIndexMin) {\n        let delIndexMax = index;\n        for (let i = index; i < this.formRule.ruleLogicList.length; i++) {\n          if (this.formRule.ruleLogicList[i].isOpen === 1) {\n            delIndexMax = i; // 当点击是最小顺序号  且  是打开的isOpen==1 ，対后续第一个打开的   加不显示isShowLogic = 1\n            break;\n          }\n        }\n        this.formRule.ruleLogicList[delIndexMax].isShowLogic = 1;\n      }\n      this.$forceUpdate();\n    },\n    handleChangeOperator (index, value) {\n      for (var i = 0; i < this.formRule.selectItems.length; i++) {\n        let selectedData = this.formRule.selectItems[i];\n        if (selectedData.value === value) {\n          this.formRule['selectOperator' + value] = selectedData.selectOperator;\n          break;\n        }\n      }\n      this.updateData();\n    },\n    format (labels, selectedData) {\n      const index = labels.length - 1;\n      const data = selectedData[index] || false;\n      if (data && selectedData.length > 1) {\n        let strLength = 44;\n        /// 获得字符串实际长度，中文2，英文1\n        let valLength = this._getLength(selectedData[0].label);/// selectedData[0].label.length\n        let space = '';\n        let shiStr = '' + Math.round(valLength / 10);\n        switch (shiStr) {\n          case '1' :\n            space = '                   ';\n            break;\n          case '2' :\n            space = '              ';\n            break;\n          case '3' :\n            space = '    ';\n            break;\n          default :\n            space = '';\n        }\n        let arr = [];\n        for (var i = 0; i < (strLength - valLength); i++) {\n          space = space + ' ';\n          arr.push('');\n        }\n        return selectedData[0].label + space + selectedData[1].label;\n      }\n      return labels[index];\n    },\n    _getLength (str) {\n      /// 获得字符串实际长度，中文2，英文1\n      /// 参数 str：要获得长度的字符串\n      var realLength = 0, len = str.length, charCode = -1;\n      for (var i = 0; i < len; i++) {\n        charCode = str.charCodeAt(i);\n        if (charCode >= 0 && charCode <= 128) realLength += 1;\n        else realLength += 2;\n      }\n      return realLength;\n    },\n    selectDataCascader (index, selectData) {\n\n      if (selectData.length > 1) {\n        let dataparas = selectData[0].dataparas;\n        let itemD = this.formRule.ruleLogicList[index];\n        if (dataparas === 'n') {\n          itemD.paramMax = Infinity;\n          itemD.paramMin = -Infinity;\n        } else {\n          let paras = dataparas.split(',');\n          itemD.paramMax = paras[paras.length - 1] ? parseInt(paras[paras.length - 1]) : Infinity;\n          itemD.paramMin = parseInt(paras[0]);\n        }\n      }\n\n      this.updateData();\n    },\n    updateData () {\n      // 只数据刷新，否则显示不变\n      this.$forceUpdate();\n    },\n    /**\n     * rule code replace _yz\n     * @param code\n     * @reutn String code\n     */\n    formatRuleCode (code) {\n      let ruleCode = '';\n      return code ? code.replace('_yz', '') : '';\n    },\n    ruleValidatorHandle (name) {\n      this.$refs[name].validate((valid) => {\n        if (valid) {\n          let formSubmitConfig;\n          var flag = this.ruleValidatorAction(this.formRule.ruleLogicList, function (data) {\n            formSubmitConfig = data;\n          });\n          var str_rule = JSON.stringify(formSubmitConfig);\n          var isError = this.isError(str_rule);\n          if (isError === true) {\n            this.$Message.warning('规则校验格式错误!');\n          } else {\n            this.$Message.success('规则校验格式正确!');\n          }\n          this.isShowValidator = true;\n        } else {\n          this.$Message.error('规则校验格式错误!');\n        }\n      });\n      this.ruleLogicLabelHandle();\n    },\n    ruleLogicLabelHandle () {\n      // 匹配label\n      this.formRule.ruleLogicList && this.formRule.ruleLogicList.map(item => {\n        this.formRule.selectItems.map(o => {\n          if (item.cascade[0] === o.value) {\n            item.label = o.label;\n          }\n        });\n        if (item.logic === '&&') {\n          item.logicLabel = '且';\n        }\n        if (item.logic === '||') {\n          item.logicLabel = '或';\n        }\n      });\n    },\n    ruleValidatorAction: function (arr, fn) {\n      // logics\n      var empty = []; //\n      var fields = []; // 选择规则  包含左右括号 fields:(j_shut_down,j_shut_down),j_shut_down\n      var operators = []; // 运算符  operators:==,==,==\n      var params = []; // 输入参数 params:1,1,1\n      var logics = []; // 关系 logics:&&,||\n      var data = null;\n      arr.forEach(function (v, i, arr) {\n        if (v.isOpen === 1) {\n          if (/^\\s*$/g.test(v.param)) {\n            empty.push(i);\n          }\n        }\n      });\n      if (empty.length) {\n        this.$Message.warning('输入条件不能为空，请输入');\n        return false;\n      }\n      /// debugger\n      arr.forEach(function (v, i, arr) {\n        // debugger\n        if (v.isOpen === 1) {\n          var hiddenFields = (v.leftBracks ? '(' : '') + v.cascade[0] + (v.rightBracks ? ')' : '');// v.cascade[0] v.field\n          // console.log(i+\"field     \"+hiddenFields+\"  ==\",v.field)\n          fields.push(hiddenFields);\n          operators.push(v.cascade[1]);// v.operator\n          params.push(v.param);\n          logics.push(v.logic);\n        }\n      });\n      /// 逻辑符号取两个表达式之间的值，把最后一个符号删除掉 old\n      /// logics.pop()\n      /// 逻辑符号 把数据库中 两个以上 这种 [\"||\",\"\"] 修改为 [\"\",\"||\"] 把第一个位置删除掉\n      logics.shift();\n\n      data = {\n        fields: fields.join(','),\n        operators: operators.join(','),\n        params: params.join(','),\n        logics: logics.join(',') /// logics : encodeURIComponent(logics.join(','))\n      };\n\n      // return;\n      fn && fn(data);\n      return true;\n    },\n    isError: function (str) {\n      var r = /[)(]/gm,\n        r2 = /\\([^()]*\\)/gm,\n        newStr = str;\n      newStr = newStr.replace(r2, '');\n      if (r2.test(newStr)) {\n        arguments.callee(newStr);\n      } else {\n        return r.test(newStr);\n      }\n    },\n    handleAdd1 () {\n      this.logicIndex++;\n\n      this.formRule.items.push({\n\n        value: '',\n        logic: '&&',\n        index: this.logicIndex,\n        isOpen: 1\n      });\n      this.$forceUpdate();\n    },\n    handleRemove1 (index) {\n      this.formRule.items[index].isOpen = 0;\n      this.$forceUpdate();\n    },\n    handleSubmit (name) {\n      this.$forceUpdate();\n      this.loading = true;\n      setTimeout(() => {\n        this.loading = false;\n      }, 1500);\n\n      this.$refs[name].validate((valid) => {\n        if (valid) {\n          this.formSubmit();\n        } else {\n          this.$Message.error('规则校验格式错误!');\n        }\n      });\n\n    },\n    handleReset (name) {\n      if (this.isAddHandle !== 'check') {\n        this.$refs[name].resetFields();\n      }\n      this.$emit('cancel-data', {}, true);\n    },\n    formSubmit () {\n      var cfg = {\n        status: this.formRule.statusCopy ? 1 : 0, // 1启用 0不启用\n        ruleType: this.ruleType,\n        ruleName: this.formRule.ruleName,\n        ruleCode: this.formRule.ruleCode,\n        remark: this.formRule.remark,\n        priority: this.formRule.priority,\n        typeVersion: this.version,\n        id: this.formRule.id || '',\n        style: 6 // 1基础班规则2标准版贷前规则3标准版贷中规则，4策略API，5验证管理\n      };\n      // id 新增时不传、编辑时必传\n      // 添加时不传 ;ruleCode 中有\"_yz\"时只传id,ruleCode,priority,---status,\n      if (this.isAddHandle) {\n        for (var item in cfg) {\n          if (item === 'id' || item === 'ruleCode') {\n            delete cfg[item];\n          }\n        }\n      }\n\n      //\n      //= ==========================新建编辑验证===============================\n      //\n\n      let formSubmitConfig = {};\n      var flag = this.ruleValidatorAction(this.formRule.ruleLogicList, function (data) {\n        formSubmitConfig = data;\n      });\n\n      var str_rule = JSON.stringify(formSubmitConfig);\n      var isError = this.isError(str_rule);\n      if (isError === true) {\n        this.$Message.error('规则校验格式错误!');\n        return;\n      } else {\n        // this.$Message.success('规则校验格式正确!')\n      }\n\n      for (var itemC in formSubmitConfig) {\n        if (!cfg[itemC]) {\n          cfg[itemC] = formSubmitConfig[itemC];\n        }\n      }\n\n      if (flag) {\n        this.cfgRule = cfg;\n        this.$emit('set-data', this.cfgRule, true);\n      }\n      // 重置表单\n      /// this.handleReset('formRule');\n      this.$refs[name].resetFields();\n    },\n    closeModal: function () {\n      this.isShowValidator = false;\n    }\n  },\n  mounted: function () {\n    this.init();\n  },\n  watch: {\n    // 监控itemData变量变化的时候，自动执行此函数\n    itemData: {\n      handler: function (val, oldVal) {\n        this.itemData = val;\n        // 数据变更时再次更新视图\n        this.init();\n      },\n      deep: true\n    }\n  }\n};\n",{"version":3,"sources":["RuleAddEdit.vue"],"names":[],"mappingsfile":"RuleAddEdit.vue","sourceRoot":"node_modules/@bairong/jax/src/components/rules","sourcesContent":["<template>\n  <div class=\"section\">\n    <div class=\"section-title\" v-if=\"titleName\">\n      {{titleName}}\n    </div>\n    <div class=\"section-body\" style=\"max-width:100%;\">\n      <Form ref=\"formRule\" :model=\"formRule\" :rules=\"ruleValidate\" label-position=\"right\" :label-width=\"100\" style=\"width:100%\">\n        <div v-if=\"isAddHandle === 'check'\">\n          <p><span class=\"form-check\">归属规则集</span>{{typeName}}</p>\n          <p><span class=\"form-check\">规则编号</span>{{formatRuleCode(formRule.ruleCode)}}</p>\n          <p><span class=\"form-check\">规则名称</span>{{formRule.ruleName}}</p>\n          <p><span class=\"form-check\">规则说明</span>{{formRule.remark}}</p>\n          <p><span class=\"form-check\">规则权重</span>{{formRule.priority}}</p>\n          <p><span class=\"form-check\">规则状态</span>{{formRule.status ? '启用' : '停用'}}</p>\n          <p><span class=\"form-check\" style=\"padding: 5px 10px 0;\">规则逻辑</span></p>\n          <table style=\"display:inline-block;\" border=\"0\" bordercolor=\"#ffffff\" background=\"#F0F1F5\" border-collapse=\"collapse\">\n            <tbody v-for=\"(v,no) in formRule.ruleLogicList\" v-bind:key=\"no\">\n            <tr style=\"\" v-if=\"v.isOpen\">\n              <td class=\"form-check-logic\" style=\"width: 100px;\"></td>\n              <td class=\"form-check-logic\" style=\"width: 20px;\">{{v.logicLabel}}</td>\n              <td class=\"form-check-logic\" style=\"width: 20px;\">{{v.leftBracks?'(':'&nbsp; '}}</td>\n              <td class=\"form-check-logic\" >{{v.label}}</td>\n              <td class=\"form-check-logic\" style=\"width: 30px;text-align:center;\">{{v.cascade[1]}}</td>\n              <td class=\"form-check-logic\" style=\"width: 40px;\">{{v.param}}</td>\n              <td class=\"form-check-logic\" style=\"width: 10px;\">{{v.rightBracks?')':'&nbsp; '}}</td>\n            </tr>\n            </tbody>\n          </table>\n        </div>\n        <div v-else>\n          <FormItem label=\"归属规则集\" >\n            <Input v-model=\"typeName\" disabled placeholder=\"所属规则集\" />\n          </FormItem>\n          <FormItem label=\"规则编号\">\n            <Input :value=\"formatRuleCode(formRule.ruleCode)\" disabled placeholder=\"规则编号由后台直接生成\" />\n          </FormItem>\n          <FormItem label=\"规则名称\" prop=\"ruleName\">\n            <Input v-model=\"formRule.ruleName\" :disabled=\"formRule.ruleTypeStatus == 0 ? true : false\" type=\"text\" placeholder=\"请输入规则名称 如评分高风险 ...\"></Input>\n          </FormItem>\n          <FormItem label=\"规则说明\" prop=\"remark\">\n            <Input v-model=\"formRule.remark\" type=\"textarea\" :disabled=\"formRule.ruleTypeStatus == 0 ? true : false\" :autosize=\"{minRows: 3,maxRows: 5}\" placeholder=\"请输入规则说明...\"></Input>\n          </FormItem>\n          <FormItem label=\"规则权重\" prop=\"priority\">\n            <Input style=\"width:80px\" v-model=\"formRule.priority\" number placeholder=\"最大值100\" />\n          </FormItem>\n          <FormItem label=\"规则状态\" >\n            <i-switch v-model=\"formRule.statusCopy\" size=\"large\">\n              <span slot=\"open\">启用</span>\n              <span slot=\"close\">停用</span>\n            </i-switch>\n          </FormItem>\n          <FormItem label=\"规则逻辑\" >\n            <Row>\n              <Col span=\"2\">\n                <Button :disabled=\"formRule.ruleTypeStatus == 0 ? true : false\" type=\"primary\" size=\"small\"  @click=\"ruleValidatorHandle('formRule')\" >规则校验</Button>\n              </Col>\n            </Row>\n          </FormItem>\n          <FormItem\n            v-for=\"(item, index) in formRule.ruleLogicList\"\n            v-if=\"false && item.isOpen\"\n            key=\"index\">\n            <Row>\n              <Col span=\"18\">\n                <FormItem label=\"test：\" prop=\"cascade\"\n                          :rules=\"{required: true, message: 'Item cascade' + item.index +' can not be empty cascade', trigger: 'blur'}\">\n                  <Cascader :data=\"formRule.selectItems\" v-model=\"item.cascade\" :render-format=\"format\" placeholder=\"请选择变量名称和计算符号\" @on-change=\"(value,data)=>selectDataCascader(value,data,index,item.cascade)\" style=\"width:300px\"></Cascader>\n                </FormItem>\n                <FormItem label=\"test：\" prop=\"param\"\n                          :rules=\"{required: true, message: 'Item param' + item.index +' can not be empty param', trigger: 'blur'}\">\n                  <Input type=\"text\" v-model=\"item.param\" style=\"width:75px\" placeholder=\"请输入数值...\"></Input>\n                </FormItem>\n                <RadioGroup v-model=\"item.logic\" @on-change=\"updateData\" type=\"button\" size=\"small\">\n                  <Radio label=\"&&\">且</Radio>\n                  <Radio label=\"||\">或</Radio>\n                </RadioGroup>\n                <Input type=\"text\" v-model=\"item.value\" placeholder=\"Enter something...\"></Input>\n              </Col>\n              <Col span=\"4\" offset=\"1\">\n                <Button type=\"dashed\" long @click=\"handleAdd1\" icon=\"plus-round\">Add item</Button>\n                <Button type=\"ghost\" @click=\"handleRemove1(index)\">Delete</Button>\n              </Col>\n            </Row>\n          </FormItem>\n          <FormItem disabled :label-width=\"100\" v-for=\"(item, index) in formRule.ruleLogicList\" v-if=\"item.isOpen\" :key=\"index\" >\n            <Row style=\"margin-left: -100px;\">\n              <Col span=\"1\" style=\"width: 100px;text-align: center;\">\n                <span v-if=\"item.index == 0 || item.isShowLogic == 1 \">&nbsp;&nbsp;&nbsp;</span>\n                <FormItem v-else :prop=\"'ruleLogicList.' + index + '.logic'\"\n                          :rules=\"{required: true, message: '请选择值：且、或 ' + '', trigger: 'change'}\">\n                  <RadioGroup v-model=\"item.logic\" @on-change=\"updateData\" type=\"button\" size=\"small\">\n                    <Radio :disabled=\"formRule.ruleTypeStatus == 0 ? true : false\" label=\"&&\">且</Radio>\n                    <Radio :disabled=\"formRule.ruleTypeStatus == 0 ? true : false\" label=\"||\">或</Radio>\n                  </RadioGroup>\n                </FormItem>\n              </Col>\n              <Col span=\"20\">\n                <!--外层row 是为了 且或变成一行，才嵌套的现象-->\n                <Row class=\"last-form-item\">\n                  <div>\n                    <Switch :disabled=\"formRule.ruleTypeStatus == 0 ? true : false\" v-model=\"item.leftBracks\">\n                      <span slot=\"open\">(</span>\n                      <span slot=\"close\">(</span>\n                    </Switch>\n                  </div>\n                  <div>\n                    <FormItem style=\"padding-left: 5px;\" :prop=\"'ruleLogicList.' + index + '.cascade'\"\n                              :rules=\"{required: true, type: 'array',min: 1, message: '请选择变量名称和计算符号', trigger: 'change'}\" >\n                      <div style=\"clear:both;display: inline-table;min-width: 390px;\">\n                        <Cascader :transfer=\"false\" :disabled=\"formRule.ruleTypeStatus == 0 ? true : false\" :data=\"formRule.selectItems\" v-model=\"item.cascade\" :render-format=\"format\" placeholder=\"请选择变量名称和计算符号\" @on-change=\"(value,data)=>selectDataCascader(index,data)\"></Cascader>\n                      </div>\n                    </FormItem>\n                  </div>\n                  <div>\n                    <!--v-model和:value 要匹配才绑定，label显示用  -->\n                    <FormItem :prop=\"'ruleLogicList.' + index + '.param'\" class=\"special-input-num\"\n                              :rules=\"[{required: true, type:'string', message: '请输入数值', trigger: 'blur'},{pattern: /^[0-9]+([.]{1}[0-9]{1,2}){0,1}$/, message: '整数或最多保留两位小数', trigger: 'change'}]\">\n                      <Input style=\"width: 90px;\" type=\"text\" @on-keyup=\"updateData\" v-model=\"item.param\" :disabled=\"formRule.ruleTypeStatus == 0\" placeholder=\"请输入数值...\"></Input>\n                    </FormItem>\n                  </div>\n                  <div>\n                    <Switch :disabled=\"formRule.ruleTypeStatus == 0 ? true : false\" v-model=\"item.rightBracks\">\n                      <span slot=\"open\">)</span>\n                      <span slot=\"close\">)</span>\n                    </Switch>\n                  </div>\n                  <div>\n                    <Button :disabled=\"formRule.ruleTypeStatus == 0 ? true : false\" type=\"text\" @click=\"handleAdd\" size=\"large\" :style=\"{fontSize: '20px',color: '#3097FE',padding: '0 3px',minWidth:'auto'}\" icon=\"ios-plus-outline\" v-if=\"item.index+1 == formRule.ruleLogicList.length && index < 20\"></Button>\n                    <Button :disabled=\"formRule.ruleTypeStatus == 0 ? true : false\" type=\"text\" icon='ios-minus-outline' size=\"large\" style=\"font-size: 20px;color: #EF444D;padding: 0 3px;min-width:auto;\" @click=\"handleRemove(index)\" v-else></Button>\n                  </div>\n                </Row>\n              </Col>\n            </Row>\n          </FormItem>\n        </div>\n        <FormItem :label-width=\"1\" style=\"text-align: right; padding-top: 20px; margin-bottom: 0px;\">\n          <Button v-if=\"isAddHandle !== 'check'\" :loading=\"loading\" type=\"primary\" @click=\"handleSubmit('formRule')\">保存</Button>\n          <Button type=\"ghost\" @click=\"handleReset('formRule')\" style=\"margin-left: 8px\">取消</Button>\n        </FormItem>\n      </Form>\n    </div>\n\n    <Modal v-model=\"isShowValidator\" width=\"500\" :transfer=\"false\" :mask-closable=\"false\" ok-text=\"保存\" cancel-text=\"取消\">\n      <p slot=\"header\">\n        <span>规则校验格式</span>\n      </p>\n      <div style=\"text-align:center;\">\n        <ul>\n          <li v-for=\"(v,no) in formRule.ruleLogicList\" style=\"list-style: none;\">&nbsp;\n            <Row :gutter=\"16\" v-if=\"v.isOpen\">\n              <Col span=\"1\">\n                    <span v-if=\"v.index == 0 || v.isShowLogic == 1 \">\n                      &nbsp;\n                    </span>\n                <span v-else>\n                      {{ v.logicLabel}}\n                    </span>\n              </Col>\n              <Col span=\"1\">\n                {{ v.leftBracks?'(':'&nbsp; ' }}\n              </Col>\n              <Col span=\"16\">\n                {{ v.label }}\n              </Col>\n              <Col span=\"2\">\n                {{ v.cascade[1] }}\n              </Col>\n              <Col span=\"3\">\n                {{ v.param }}\n              </Col>\n              <Col span=\"1\">\n                {{ v.rightBracks?')':'&nbsp; ' }}\n              </Col>\n            </Row>\n            <Row :gutter=\"16\" v-if=\"false && v.isOpen && no < formRule.ruleLogicList.length-1\">\n              <Col span=\"4\">\n                {{ v.logicLabel}}\n              </Col>\n            </Row>\n          </li>\n        </ul>\n      </div>\n      <div slot=\"footer\" style=\"text-align: center;\">\n        <Button type=\"primary\" size=\"large\" @click=\"closeModal\">关闭</Button>\n      </div>\n    </Modal>\n\n  </div>\n</template>\n\n<script>\n/**\n * 参数说明：\n * titleName 标题名称  如  编辑规则\n * isAddHandle 当前操作是新建 true、编辑 false、查看'check'。\n *\n *\n */\nexport default {\n  name: 'RuleAddEdit',\n  props: ['titleName', 'isAddHandle', 'ruleType', 'version', 'typeName', 'itemData', 'rulesetKey'],\n  data () {\n    const validateCascade = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error('Please enter your password'));\n      } else {\n        if (value === 2) {\n          callback(new Error('输入值过短！'));\n        } else if (value > 2) {\n          callback(new Error('输入值过长！'));\n        }\n        callback(new Error('值过长！'));\n      }\n      callback();\n    };\n    const validatePass = (para, rule, value, callback) => {\n      callback();\n    };\n    const validateRuleName = (rule, value, callback) => {\n      const pattern = /^[a-zA-Z0-9_-|\\u4E00-\\u9FA5]|\\S\\s{4,56}$/;\n      if (value) {\n        if (!pattern.test(value.trim())) {\n          callback(new Error('规则名称不可包含特殊字符，且不能少于四位字符！'));\n        }\n      }\n      callback();\n    };\n    return {\n      ddd: {validator: validatePass.bind(this, 55), message: '565', trigger: 'change'},\n      isShowValidator: false,\n      cfgRule: {},\n      buttonAnd: '且',\n      buttonOr: '或',\n      logicIndex: 0,\n      proList: [{\n        value: '1',\n        label: '注册'\n      }, {\n        value: '2',\n        label: '登录'\n      }, {\n        value: '3',\n        label: '借款'\n      }, {\n        value: '4',\n        label: '提现'\n      }],\n      selectOperator: [\n        {label: '=', value: '=='},\n        {label: '>', value: '>'},\n        {label: '>=', value: '>='},\n        {label: '<', value: '<'},\n        {label: '<=', value: '<='}\n      ],\n      platformList: [{\n        value: '1',\n        label: 'WEB'\n      }, {\n        value: '2',\n        label: 'IOS'\n      }, {\n        value: '3',\n        label: 'Android'\n      }],\n      isShowLog: false,\n      loading: false,\n      formRule: {\n        ruleset: '',\n        ruleCode: '',\n        ruleName: '',\n        remark: '',\n        priority: '',\n        status: '',\n        ruleTypeStatus: 1, /// ruleTypeStatus Filter 0:预置规则，1:自定义规则\n        ruleLogicList: [{\n          cascade: [],\n          field: '',\n          leftBracks: false,\n          rightBracks: false,\n          logic: '&&',\n          operator: '',\n          param: '',\n          paramMax: Infinity,\n          paramMin: -Infinity,\n          value: 0,\n          isOpen: 1,\n          index: 1\n        }],\n        selectItems: [],\n        items: [{\n          value: '',\n          index: 1,\n          isOpen: 1\n        }]\n      },\n      ruleValidate: {\n        ruleset: [{\n          required: true,\n          message: '归属规则集是必填项',\n          trigger: 'blur'\n        }, {\n          type: 'array',\n          max: 2,\n          message: 'Choose two hobbies at best',\n          trigger: 'change'\n        }\n\n        ],\n        ruleCode: [{\n          required: false,\n          message: '规则编号是必填项',\n          trigger: 'blur'\n        }, {\n          type: 'email',\n          message: 'Incorrect email format',\n          trigger: 'blur'\n        }],\n        ruleName: [{\n          required: true,\n          message: '规则名称是必填项',\n          trigger: 'blur'\n        }, {\n          // pattern: /^[a-zA-Z0-9_-|\\u4E00-\\u9FA5]|\\S\\s{4,56}$/,\n          // message: '规则名称不可包含特殊字符，且不能少于四位字符！',\n          validator: validateRuleName,\n          trigger: 'blur'\n        }\n          // {type: \"string\", required: true, pattern: schema.pattern.email}\n        ],\n        remark: [{\n          required: false,\n          max: 100,\n          message: '规则说明长度最多100个汉字',\n          trigger: 'blur'\n        }],\n        priority: [\n          {\n            // pattern: /^([1-9]|[12]\\d)$,\n            pattern: /^100$|^([0-9]|[0-9]\\d)$/,\n            required: true,\n            message: '规则权重不能空且只能为小于等于100的数字！',\n            trigger: 'change'\n          }\n        ],\n        status: [{\n          required: true,\n          type: 'string',\n          message: '规则状态是必填项',\n          trigger: 'change'\n        }],\n        cascade0: [\n          { required: true, pattern: /^\\s+$/g, message: 'The name cannot be empty000001', trigger: 'change' }\n        ],\n        cascade1: [\n          { required: true, type: 'array', message: 'The name cannot be empty11', trigger: 'change' }\n        ],\n        cascade2: [\n          { required: true, validator: validateCascade, message: 'The name cannot be empty22', trigger: 'change' }\n        ],\n        param: [\n          { validator: validateCascade, trigger: 'blur' }\n        ],\n        cascade: [\n          { validator: validateCascade, trigger: 'blur' }\n        ],\n        ruleLogicList: [{\n          required: true,\n          type: 'array',\n          message: '请选择输入值',\n          trigger: 'change'\n        }]\n      }\n    };\n  },\n  components: {\n  },\n  created () {\n    /* 接收新建规则事件 */\n    this.$on('createRuleDataEvent', (evt) => {\n      /// 每次更改数据watch：itemData都会调用init，添加时不传 ;ruleCode 中有\"_yz\"时只传id,ruleCode,priority,---status,\n      if (this.isAddHandle) {\n        this.logicIndex = 0; // 只在创建的时候用\n      }\n      this.init();\n      this.$forceUpdate();\n    });\n  },\n  methods: {\n    init: function () {\n      // 使用props传递数据  itemData\n      // 添加时不传 ;ruleCode 中有\"_yz\"时只传id,ruleCode,priority,---status,\n      if (this.rulesetKey) {\n        this.formRule = this.itemData;\n        this.formRule.statusCopy = typeof this.formRule.statue === 'boolean' ? this.formRule.status : this.formRule.status === 1;// 1启用 0不启用\n        if (this.formRule.jsonstr && this.formRule.jsonstr !== '') {\n          this.formRule.jsonObj = this.formRule.jsonstr ? JSON.parse(this.formRule.jsonstr) : {};\n          let jsonVal = this.formRule.jsonObj;\n          let length = jsonVal.fields ? jsonVal.fields.length : 0;\n\n          /// 逻辑符号 把数据库中 两个以上 这种 [\"||\",\"\"] 修改为 [\"\",\"||\"]\n          let logicsArr = jsonVal.logics;\n          if (logicsArr && logicsArr.length >= 2) {\n            logicsArr.unshift(logicsArr[logicsArr.length - 1]); // 从最后添加到第一个位置\n            logicsArr.pop(); // 把最后一个符号删除掉\n          } else {\n            logicsArr = jsonVal.logics;\n          }\n          jsonVal.logicArr = logicsArr;\n\n          let ruleLogicList = [];\n          for (var i = 0; i < length; i++) {\n            let ruleLogic = {};\n            ruleLogic.leftBracks = !!/^\\(/g.test(jsonVal.fields[i]); // 括号\n            ruleLogic.rightBracks = !!/\\)$/g.test(jsonVal.fields[i]); // 括号\n            ruleLogic.field = jsonVal.fields[i].match(/([^()]+)/g)[0];\n            ruleLogic.operator = jsonVal.operators[i];\n            ruleLogic.cascade = [ruleLogic.field, ruleLogic.operator];\n\n            ruleLogic.logic = jsonVal.logicArr[i];\n\n            ruleLogic.param = parseFloat(jsonVal.params[i]) + '';\n\n            ruleLogic.index = i;\n            ruleLogic.isOpen = 1; // 逻辑删除标识  一条\n            ruleLogic.value = i + i + i;\n\n            ruleLogicList.push(ruleLogic);\n          }\n          setTimeout(() => {\n            this.formRule.ruleLogicList = ruleLogicList;\n            this.logicIndex = ruleLogicList.length > 1 ? ruleLogicList.length - 1 : 0;\n            if (this.isAddHandle === 'check') {\n              this.ruleLogicLabelHandle();\n            }\n            this.updateData();\n          }, 50);\n        }\n\n        this.formRule.items = [\n          {\n            value: '',\n            index: 1,\n            logic: '&&',\n            isOpen: 1\n          }\n        ];\n        this.formRule.selectOperator = this.selectOperator;\n\n        let selectItems_ = [];\n\n        for (var i = 0; i < this.rulesetKey.length; i++) {\n          let operatorArr = [];// 每个规则变量对应的  一组操作符\n          let arr = (this.rulesetKey[i].logs && this.rulesetKey[i].logs.split(',')) || [];\n          if (/.+\\,$/g.test(this.rulesetKey[i].logs)) {\n            arr.pop(); // 去除尾部 ,\n          }\n          arr.forEach(function (v, j) {\n            let value = '';\n            if (v === '=') {\n              value = '==';\n            } else {\n              value = v;\n            }\n            let tempObj = {label: v, value: value};\n            operatorArr.push(tempObj);\n          });\n\n          let selectItem_ = {\n            index: i,\n            label: this.rulesetKey[i].key_name,\n            value: this.rulesetKey[i].rule_key,\n            datalogs: this.rulesetKey[i].logs,\n            children: operatorArr,\n            dataparas: this.rulesetKey[i].paras\n          };\n          selectItems_.push(selectItem_);\n        }\n\n        this.formRule.selectItems = selectItems_;\n\n        this.$forceUpdate();\n      }\n    },\n    handleAdd () {\n      this.logicIndex++;\n      this.formRule.ruleLogicList.push({\n        cascade: [],\n        field: '',\n        leftBracks: false,\n        rightBracks: false,\n        logic: '&&',\n        operator: '',\n        param: '',\n        paramMax: Infinity,\n        paramMin: -Infinity,\n        value: 0,\n        index: this.logicIndex,\n        isOpen: 1\n      });\n\n      this.$forceUpdate();\n    },\n\n    handleRemove (index) {\n      this.formRule.ruleLogicList[index].isOpen = 0;\n      let delIndexMin = false; // 当点击是最小顺序号  且  是打开的 ，进行逻辑显示\n      for (let i = 0; i < index; i++) {\n        if (this.formRule.ruleLogicList[i].isOpen === 1) {\n          delIndexMin = true;\n          break;\n        }\n      }\n      if (!delIndexMin) {\n        let delIndexMax = index;\n        for (let i = index; i < this.formRule.ruleLogicList.length; i++) {\n          if (this.formRule.ruleLogicList[i].isOpen === 1) {\n            delIndexMax = i; // 当点击是最小顺序号  且  是打开的isOpen==1 ，対后续第一个打开的   加不显示isShowLogic = 1\n            break;\n          }\n        }\n        this.formRule.ruleLogicList[delIndexMax].isShowLogic = 1;\n      }\n      this.$forceUpdate();\n    },\n    handleChangeOperator (index, value) {\n      for (var i = 0; i < this.formRule.selectItems.length; i++) {\n        let selectedData = this.formRule.selectItems[i];\n        if (selectedData.value === value) {\n          this.formRule['selectOperator' + value] = selectedData.selectOperator;\n          break;\n        }\n      }\n      this.updateData();\n    },\n    format (labels, selectedData) {\n      const index = labels.length - 1;\n      const data = selectedData[index] || false;\n      if (data && selectedData.length > 1) {\n        let strLength = 44;\n        /// 获得字符串实际长度，中文2，英文1\n        let valLength = this._getLength(selectedData[0].label);/// selectedData[0].label.length\n        let space = '';\n        let shiStr = '' + Math.round(valLength / 10);\n        switch (shiStr) {\n          case '1' :\n            space = '                   ';\n            break;\n          case '2' :\n            space = '              ';\n            break;\n          case '3' :\n            space = '    ';\n            break;\n          default :\n            space = '';\n        }\n        let arr = [];\n        for (var i = 0; i < (strLength - valLength); i++) {\n          space = space + ' ';\n          arr.push('');\n        }\n        return selectedData[0].label + space + selectedData[1].label;\n      }\n      return labels[index];\n    },\n    _getLength (str) {\n      /// 获得字符串实际长度，中文2，英文1\n      /// 参数 str：要获得长度的字符串\n      var realLength = 0, len = str.length, charCode = -1;\n      for (var i = 0; i < len; i++) {\n        charCode = str.charCodeAt(i);\n        if (charCode >= 0 && charCode <= 128) realLength += 1;\n        else realLength += 2;\n      }\n      return realLength;\n    },\n    selectDataCascader (index, selectData) {\n\n      if (selectData.length > 1) {\n        let dataparas = selectData[0].dataparas;\n        let itemD = this.formRule.ruleLogicList[index];\n        if (dataparas === 'n') {\n          itemD.paramMax = Infinity;\n          itemD.paramMin = -Infinity;\n        } else {\n          let paras = dataparas.split(',');\n          itemD.paramMax = paras[paras.length - 1] ? parseInt(paras[paras.length - 1]) : Infinity;\n          itemD.paramMin = parseInt(paras[0]);\n        }\n      }\n\n      this.updateData();\n    },\n    updateData () {\n      // 只数据刷新，否则显示不变\n      this.$forceUpdate();\n    },\n    /**\n     * rule code replace _yz\n     * @param code\n     * @reutn String code\n     */\n    formatRuleCode (code) {\n      let ruleCode = '';\n      return code ? code.replace('_yz', '') : '';\n    },\n    ruleValidatorHandle (name) {\n      this.$refs[name].validate((valid) => {\n        if (valid) {\n          let formSubmitConfig;\n          var flag = this.ruleValidatorAction(this.formRule.ruleLogicList, function (data) {\n            formSubmitConfig = data;\n          });\n          var str_rule = JSON.stringify(formSubmitConfig);\n          var isError = this.isError(str_rule);\n          if (isError === true) {\n            this.$Message.warning('规则校验格式错误!');\n          } else {\n            this.$Message.success('规则校验格式正确!');\n          }\n          this.isShowValidator = true;\n        } else {\n          this.$Message.error('规则校验格式错误!');\n        }\n      });\n      this.ruleLogicLabelHandle();\n    },\n    ruleLogicLabelHandle () {\n      // 匹配label\n      this.formRule.ruleLogicList && this.formRule.ruleLogicList.map(item => {\n        this.formRule.selectItems.map(o => {\n          if (item.cascade[0] === o.value) {\n            item.label = o.label;\n          }\n        });\n        if (item.logic === '&&') {\n          item.logicLabel = '且';\n        }\n        if (item.logic === '||') {\n          item.logicLabel = '或';\n        }\n      });\n    },\n    ruleValidatorAction: function (arr, fn) {\n      // logics\n      var empty = []; //\n      var fields = []; // 选择规则  包含左右括号 fields:(j_shut_down,j_shut_down),j_shut_down\n      var operators = []; // 运算符  operators:==,==,==\n      var params = []; // 输入参数 params:1,1,1\n      var logics = []; // 关系 logics:&&,||\n      var data = null;\n      arr.forEach(function (v, i, arr) {\n        if (v.isOpen === 1) {\n          if (/^\\s*$/g.test(v.param)) {\n            empty.push(i);\n          }\n        }\n      });\n      if (empty.length) {\n        this.$Message.warning('输入条件不能为空，请输入');\n        return false;\n      }\n      /// debugger\n      arr.forEach(function (v, i, arr) {\n        // debugger\n        if (v.isOpen === 1) {\n          var hiddenFields = (v.leftBracks ? '(' : '') + v.cascade[0] + (v.rightBracks ? ')' : '');// v.cascade[0] v.field\n          // console.log(i+\"field     \"+hiddenFields+\"  ==\",v.field)\n          fields.push(hiddenFields);\n          operators.push(v.cascade[1]);// v.operator\n          params.push(v.param);\n          logics.push(v.logic);\n        }\n      });\n      /// 逻辑符号取两个表达式之间的值，把最后一个符号删除掉 old\n      /// logics.pop()\n      /// 逻辑符号 把数据库中 两个以上 这种 [\"||\",\"\"] 修改为 [\"\",\"||\"] 把第一个位置删除掉\n      logics.shift();\n\n      data = {\n        fields: fields.join(','),\n        operators: operators.join(','),\n        params: params.join(','),\n        logics: logics.join(',') /// logics : encodeURIComponent(logics.join(','))\n      };\n\n      // return;\n      fn && fn(data);\n      return true;\n    },\n    isError: function (str) {\n      var r = /[)(]/gm,\n        r2 = /\\([^()]*\\)/gm,\n        newStr = str;\n      newStr = newStr.replace(r2, '');\n      if (r2.test(newStr)) {\n        arguments.callee(newStr);\n      } else {\n        return r.test(newStr);\n      }\n    },\n    handleAdd1 () {\n      this.logicIndex++;\n\n      this.formRule.items.push({\n\n        value: '',\n        logic: '&&',\n        index: this.logicIndex,\n        isOpen: 1\n      });\n      this.$forceUpdate();\n    },\n    handleRemove1 (index) {\n      this.formRule.items[index].isOpen = 0;\n      this.$forceUpdate();\n    },\n    handleSubmit (name) {\n      this.$forceUpdate();\n      this.loading = true;\n      setTimeout(() => {\n        this.loading = false;\n      }, 1500);\n\n      this.$refs[name].validate((valid) => {\n        if (valid) {\n          this.formSubmit();\n        } else {\n          this.$Message.error('规则校验格式错误!');\n        }\n      });\n\n    },\n    handleReset (name) {\n      if (this.isAddHandle !== 'check') {\n        this.$refs[name].resetFields();\n      }\n      this.$emit('cancel-data', {}, true);\n    },\n    formSubmit () {\n      var cfg = {\n        status: this.formRule.statusCopy ? 1 : 0, // 1启用 0不启用\n        ruleType: this.ruleType,\n        ruleName: this.formRule.ruleName,\n        ruleCode: this.formRule.ruleCode,\n        remark: this.formRule.remark,\n        priority: this.formRule.priority,\n        typeVersion: this.version,\n        id: this.formRule.id || '',\n        style: 6 // 1基础班规则2标准版贷前规则3标准版贷中规则，4策略API，5验证管理\n      };\n      // id 新增时不传、编辑时必传\n      // 添加时不传 ;ruleCode 中有\"_yz\"时只传id,ruleCode,priority,---status,\n      if (this.isAddHandle) {\n        for (var item in cfg) {\n          if (item === 'id' || item === 'ruleCode') {\n            delete cfg[item];\n          }\n        }\n      }\n\n      //\n      //= ==========================新建编辑验证===============================\n      //\n\n      let formSubmitConfig = {};\n      var flag = this.ruleValidatorAction(this.formRule.ruleLogicList, function (data) {\n        formSubmitConfig = data;\n      });\n\n      var str_rule = JSON.stringify(formSubmitConfig);\n      var isError = this.isError(str_rule);\n      if (isError === true) {\n        this.$Message.error('规则校验格式错误!');\n        return;\n      } else {\n        // this.$Message.success('规则校验格式正确!')\n      }\n\n      for (var itemC in formSubmitConfig) {\n        if (!cfg[itemC]) {\n          cfg[itemC] = formSubmitConfig[itemC];\n        }\n      }\n\n      if (flag) {\n        this.cfgRule = cfg;\n        this.$emit('set-data', this.cfgRule, true);\n      }\n      // 重置表单\n      /// this.handleReset('formRule');\n      this.$refs[name].resetFields();\n    },\n    closeModal: function () {\n      this.isShowValidator = false;\n    }\n  },\n  mounted: function () {\n    this.init();\n  },\n  watch: {\n    // 监控itemData变量变化的时候，自动执行此函数\n    itemData: {\n      handler: function (val, oldVal) {\n        this.itemData = val;\n        // 数据变更时再次更新视图\n        this.init();\n      },\n      deep: true\n    }\n  }\n};\n</script>\n\n<style>\n  .section .section-body .form-check{\n    width: 100px;\n    display:inline-block;\n    text-align:right;\n    padding: 5px 10px;\n  }\n  .section .section-body .form-check-logic{\n    background-color:#F0F1F5;\n    height: 20px;\n    border: none;\n  }\n  .section .special-input-num .ivu-form-item-error-tip{\n    white-space: nowrap;\n  }\n  .section .ivu-form-item .ivu-form-item{\n    margin-bottom: 0;\n  }\n  .section .last-form-item>div{\n    float: left;\n    padding-left: 20px;\n  }\n  .section .last-form-item>div:first-child{\n    padding: 0;\n  }\n</style>\n"]}]}