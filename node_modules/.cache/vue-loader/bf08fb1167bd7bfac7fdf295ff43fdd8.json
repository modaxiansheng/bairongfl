{"remainingRequest":"E:\\fate\\federal-study-vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\fate\\federal-study-vue\\node_modules\\@bairong\\jax\\src\\components\\rules\\PresetRuleChange.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\fate\\federal-study-vue\\node_modules\\@bairong\\jax\\src\\components\\rules\\PresetRuleChange.vue","mtime":499162500000},{"path":"E:\\fate\\federal-study-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\fate\\federal-study-vue\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\fate\\federal-study-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\fate\\federal-study-vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/**\n * 风险提示弹出框\n * 使用说明：\n * 如弹框引用 <PresetRuleChange width=\"680\" @save-confirm=\"saveConfirmOk\"></PresetRuleChange>\n *  发消息来 presetRuleChangeEvent,如下：\n *  this.$emit('presetRuleChangeEvent', {\n        type: 6, // 业务分类 1:贷前;5:验证;6:贷中,必传项\n        ruleType: 'Rule_W_SpecialList_c_pdl', // 规则集编码\n        typeVersion: '1.0', // 规则集版本号\n        ids: ['246725', '246726'] // 公司内部预置规则id数组\n      });\n * 2019.3.4\n * hl\n */\nimport TableMergeCell from '../table/TableMergeCell';\nimport Cookies from 'js-cookie';\nimport Qs from 'qs';\nexport default {\n  name: 'PresetRuleChange',\n  components: {\n    TableMergeCell\n  },\n  props: {\n    value: {type: Boolean, default: false},\n    title: {type: String, default: '风险提示'},\n    width: {default: 600}\n  },\n  data () {\n    return {\n      loading: false,\n      save_loading: false,\n      visible: this.value,\n      authStrategyCfgEg: {\n        type: 6, // 业务分类 1:贷前;5:验证;6:贷中,必传项\n        ruleType: 'Rule_W_SpecialList_c_pdl', // 规则集编码\n        typeVersion: '1.0', // 规则集版本号\n        ids: ['246725', '246726'] // 公司内部预置规则id数组\n      },\n      authStrategyCfg: {},\n      options: {\n        method: 'GET',\n        headers: {'Accept': 'application/json', 'Content-Type': 'application/json'},\n        credentials: 'same-origin', // 'same-origin', include\n        mode: 'cors',\n        cache: 'force-cache'\n      },\n      columnsPresetRule: [\n        {\n          title: '规则编号',\n          width: 85,\n          merge: 'ruleCode',\n          key: 'ruleCode'\n        },\n        {\n          title: '修改参数',\n          width: 85,\n          key: 'nameChange'\n        },\n        {\n          title: '当前规则',\n          render: (h, params) => {\n            let isLogic = !!(params.row.currentRule && typeof params.row.currentRule === 'object');\n            let names = isLogic ? params.row.currentRule : [];\n            let liArr = [];\n            for (let i = 0; i < names.length; i++) {\n              let itemSpan = h('span', names[i]);\n              let itemLi = h('li', {\n                style: {'margin-bottom': '3px', 'list-style': 'none'}\n              }, [itemSpan]);\n              liArr.push(itemLi);\n            }\n            return isLogic ? h('ul', [liArr]) : h('span', params.row.currentRule);\n          },\n          key: 'currentRule'\n        },\n        {\n          title: '变更后规则',\n          render: (h, params) => {\n            let isLogic = !!(params.row.afterRule && typeof params.row.afterRule === 'object');\n            let names = isLogic ? params.row.afterRule : [];\n            let liArr = [];\n            for (let i = 0; i < names.length; i++) {\n              let itemSpan = h('span', names[i]);\n              let itemLi = h('li', {\n                style: {'margin-bottom': '3px', 'list-style': 'none'}\n              }, [itemSpan]);\n              liArr.push(itemLi);\n            }\n            return isLogic ? h('ul', [liArr]) : h('span', params.row.afterRule);\n          },\n          key: 'afterRule'\n        }\n      ],\n      strategyDataGroup: []\n    };\n  },\n  methods: {\n    // 一个编号下面，多个数组表达式组成的字符数据\n    ruleLogicStr (jsonVal) {\n      let length = jsonVal.fieldsZn ? jsonVal.fieldsZn.length : 0;\n      /// 逻辑符号 把数据库中 两个以上 这种 [\"||\",\"\"] 修改为 [\"\",\"||\"]\n      // let logicsArr = jsonVal.logics;\n      // if (logicsArr && logicsArr.length >= 2) {\n      //   logicsArr.unshift(logicsArr[logicsArr.length - 1]); // 从最后添加到第一个位置\n      //   logicsArr.pop(); // 把最后一个符号删除掉\n      // } else {\n      //   logicsArr = jsonVal.logics;\n      // }\n      // jsonVal.logicArr = logicsArr;\n      // console.log('logics', jsonVal.logics, logicsArr)\n\n      let ruleLogicList = [];\n      let expression = '';\n      for (let i = 0; i < length; i++) {\n        let ruleLogic = {};\n        ruleLogic.leftBracks = /^\\(/g.test(jsonVal.fieldsZn[i]) ? ' ( ' : ' '; // 括号\n        // ruleLogic.rightBracks = !!/\\)$/g.test(jsonVal.fieldsZn[i]); // 括号\n        ruleLogic.rightBracks = /\\)$/g.test(jsonVal.params[i]) ? ' ) ' : ' '; // 括号\n        ruleLogic.field = jsonVal.fieldsZn[i].match(/([^()]+)/g)[0];\n        ruleLogic.operator = ' ' + jsonVal.operators[i] + ' ';\n        ruleLogic.logic = jsonVal.logics[i] + ' ';\n        // ruleLogic.param = parseFloat(jsonVal.params[i]) + '';\n        ruleLogic.param = parseFloat(jsonVal.params[i].match(/([^()]+)/g)[0]) + ' ';\n        ruleLogic.index = i;\n        expression = ruleLogic.leftBracks + ruleLogic.field + ruleLogic.operator + ruleLogic.param + ruleLogic.rightBracks + ruleLogic.logic;\n        ruleLogicList.push(expression);\n      }\n      return ruleLogicList;\n    },\n    ruleDataFormat (item, columnName, ruleItem) {\n      Object.keys(item).forEach((key, i) => {\n        switch (key) {\n          case 'ruleName':\n            if (item.ruleName) {\n              ruleItem.ruleName = {...ruleItem.ruleName, ruleCode: item.ruleCode, nameChange: '规则名称'};\n              ruleItem.ruleName[columnName] = item.ruleName;\n            }\n            break;\n          case 'priority':\n            if (item.priority + '' === '0' || item.priority >= 1) {\n              ruleItem.priority = {...ruleItem.priority, ruleCode: item.ruleCode, nameChange: '规则权重'};\n              ruleItem.priority[columnName] = item.priority;\n            }\n            break;\n          case 'status':\n            if (item.status + '' === '0' || item.status + '' === '1') {\n              ruleItem.status = {...ruleItem.status, ruleCode: item.ruleCode, nameChange: '规则状态'};\n              ruleItem.status[columnName] = item.status + '' === '1' ? '启用' : '禁用';\n            }\n            break;\n          case 'jsonStr':\n            if (item.jsonStr && item.jsonStr.fieldsZn) {\n              ruleItem.jsonStr = {...ruleItem.jsonStr, ruleCode: item.ruleCode, nameChange: '规则逻辑'};\n              ruleItem.jsonStr[columnName] = this.ruleLogicStr(item.jsonStr);\n            }\n            break;\n        }\n      });\n      return ruleItem;\n    },\n    initStrategy () {\n      this.loading = true;\n      // this.options.method = 'GET';\n      this.options.method = 'POST';\n      let url = '/api/rulecenter-service/newBRule/enablingPresetRuleChangeContrast';\n      if (this.options.method === 'GET') {\n        url = url + '?' + Qs.stringify(this.getSid()) + '&' + Qs.stringify(this.authStrategyCfg);\n        delete this.options.body;\n      } else {\n        // this.options.body = Qs.stringify(this.getSid()) + '&' + Qs.stringify(this.authStrategyCfg);\n        url = url + '?' + Qs.stringify(this.getSid())\n        this.options.body = JSON.stringify(this.authStrategyCfg);// 转换为一个 JSON字符串\n      }\n      fetch(url, this.options)\n        .then(response => response.json())\n        .then(({code, data, message}) => {\n          this.loading = false;\n          if (code === '000000') {\n            let groupDataArr = [];\n            // let demoData = JSON.parse('{\"code\":\"000000\",\"data\":[{\"afterAlterationRule\":{\"id\":271122,\"jsonStr\":{\"ruleType\":\"Rule_C_AirTravel_d1\",\"ruleName\":\"航空消费能力较低\",\"priority\":10,\"operators\":[\"<=\"],\"fieldsZn\":[\"航空消费能力等级\"],\"ruleCode\":\"FAA001\",\"params\":[\"23\"],\"logics\":[\"\"],\"fields\":[\"i_AirExpense_score\"]},\"priority\":null,\"ruleCode\":\"FAA001\",\"ruleName\":\"\",\"status\":null},\"currentRule\":{\"id\":471229,\"jsonStr\":{\"ruleType\":\"Rule_C_AirTravel_d1\",\"ruleName\":\"航空消费能力较低\",\"priority\":10,\"operators\":[\"<=\"],\"fieldsZn\":[\"航空消费能力等级\"],\"ruleCode\":\"FAA001\",\"params\":[\"25\"],\"logics\":[\"\"],\"fields\":[\"i_AirExpense_score\"]},\"priority\":null,\"ruleCode\":\"FAA001\",\"ruleName\":\"\",\"status\":null}},{\"afterAlterationRule\":{\"id\":271123,\"jsonStr\":{\"ruleType\":\"Rule_C_AirTravel_d1\",\"ruleName\":\"航空消费能力较高\",\"priority\":5,\"operators\":[\">=\",\"<=\"],\"fieldsZn\":[\"航空消费能力等级\",\"航空消费能力等级\"],\"ruleCode\":\"FAA002\",\"params\":[\"25\",\"59\"],\"logics\":[\"且\",\"\"],\"fields\":[\"i_AirExpense_score\",\"i_AirExpense_score\"]},\"priority\":null,\"ruleCode\":\"FAA002\",\"ruleName\":\"\",\"status\":null},\"currentRule\":{\"id\":471230,\"jsonStr\":{\"ruleType\":\"Rule_C_AirTravel_d1\",\"ruleName\":\"航空消费能力较高\",\"priority\":5,\"operators\":[\">=\",\"<=\"],\"fieldsZn\":[\"航空消费能力等级\",\"航空消费能力等级\"],\"ruleCode\":\"FAA002\",\"params\":[\"25\",\"61\"],\"logics\":[\"且\",\"\"],\"fields\":[\"i_AirExpense_score\",\"i_AirExpense_score\"]},\"priority\":null,\"ruleCode\":\"FAA002\",\"ruleName\":\"\",\"status\":null}}],\"message\":\"成功\"}');\n            // let data = demoData.data;\n            if (data && data.length >= 1) {\n              this.visible = true;\n              data.forEach(item => {\n                // 增加列字段columnName currentRule afterRule\n                let currentRule = this.ruleDataFormat(item.currentRule, 'currentRule', {})\n                let mergeRule = this.ruleDataFormat(item.afterAlterationRule, 'afterRule', currentRule)\n                // mergeRule.jsonStr.afterRule = 'afterAlterationRuleafterAlterationRuleafterAlterationRuleafterAlterationRule'.split('e')\n                Object.keys(mergeRule).forEach((key, i) => {\n                  groupDataArr.push(mergeRule[key]);\n                });\n              });\n            } else {\n              this.visible = false;\n              this.$emit('save-confirm');\n            }\n            this.strategyDataGroup = groupDataArr;\n          } else {\n            this.$Message.error(message || '服务器错误！');\n          }\n        }, reason => {\n          this.$Message.error(reason || '服务器错误！');\n        });\n    },\n    getSid (sessionId = Cookies.get('BR_COMPASS_SESSIONID')) {\n      return {sessionId, t: Date.now()};\n    },\n    resetParams () {\n      this.save_loading = false;\n    },\n    ok () {\n      // this.save_loading = true;\n      this.$emit('save-confirm');\n      this.visible = false;\n      this.resetParams();\n    },\n    cancel () {\n      this.visible = false;\n      this.$emit('input', false);\n      this.resetParams();\n    }\n  },\n  watch: {\n    value (v) {\n      this.visible = v;\n    }\n  },\n  mounted () {\n    this.$parent.$on('presetRuleChangeEvent', (evt) => {\n      this.authStrategyCfg.type = evt.type;\n      this.authStrategyCfg.typeVersion = evt.typeVersion;\n      this.authStrategyCfg.ruleType = evt.ruleType;\n      this.authStrategyCfg.ids = evt.ids;\n      this.initStrategy();\n      this.$forceUpdate();\n    });\n  }\n};\n",{"version":3,"sources":["PresetRuleChange.vue"],"names":[],"mappingsfile":"PresetRuleChange.vue","sourceRoot":"node_modules/@bairong/jax/src/components/rules","sourcesContent":["<template>\n  <Modal v-model=\"visible\" :title=\"title\" @on-cancel=\"cancel\" :width=\"width\">\n    <span>启用预置规则，将会覆盖您当前的部分规则，可能会影响您的风险政策，受影响的规则情况如下，请确认是否启动预置规则：</span>\n    <TableMergeCell style=\"margin: 16px 0;\" height=\"320px\" :columns=\"columnsPresetRule\" :data=\"strategyDataGroup\"></TableMergeCell>\n    <template slot=\"footer\">\n      <Button type=\"primary\" :loading=\"save_loading\" @click=\"ok\">确认启用</Button>\n      <Button type=\"text\" @click=\"cancel\">取消</Button>\n    </template>\n  </Modal>\n</template>\n<script>\n/**\n * 风险提示弹出框\n * 使用说明：\n * 如弹框引用 <PresetRuleChange width=\"680\" @save-confirm=\"saveConfirmOk\"></PresetRuleChange>\n *  发消息来 presetRuleChangeEvent,如下：\n *  this.$emit('presetRuleChangeEvent', {\n        type: 6, // 业务分类 1:贷前;5:验证;6:贷中,必传项\n        ruleType: 'Rule_W_SpecialList_c_pdl', // 规则集编码\n        typeVersion: '1.0', // 规则集版本号\n        ids: ['246725', '246726'] // 公司内部预置规则id数组\n      });\n * 2019.3.4\n * hl\n */\nimport TableMergeCell from '../table/TableMergeCell';\nimport Cookies from 'js-cookie';\nimport Qs from 'qs';\nexport default {\n  name: 'PresetRuleChange',\n  components: {\n    TableMergeCell\n  },\n  props: {\n    value: {type: Boolean, default: false},\n    title: {type: String, default: '风险提示'},\n    width: {default: 600}\n  },\n  data () {\n    return {\n      loading: false,\n      save_loading: false,\n      visible: this.value,\n      authStrategyCfgEg: {\n        type: 6, // 业务分类 1:贷前;5:验证;6:贷中,必传项\n        ruleType: 'Rule_W_SpecialList_c_pdl', // 规则集编码\n        typeVersion: '1.0', // 规则集版本号\n        ids: ['246725', '246726'] // 公司内部预置规则id数组\n      },\n      authStrategyCfg: {},\n      options: {\n        method: 'GET',\n        headers: {'Accept': 'application/json', 'Content-Type': 'application/json'},\n        credentials: 'same-origin', // 'same-origin', include\n        mode: 'cors',\n        cache: 'force-cache'\n      },\n      columnsPresetRule: [\n        {\n          title: '规则编号',\n          width: 85,\n          merge: 'ruleCode',\n          key: 'ruleCode'\n        },\n        {\n          title: '修改参数',\n          width: 85,\n          key: 'nameChange'\n        },\n        {\n          title: '当前规则',\n          render: (h, params) => {\n            let isLogic = !!(params.row.currentRule && typeof params.row.currentRule === 'object');\n            let names = isLogic ? params.row.currentRule : [];\n            let liArr = [];\n            for (let i = 0; i < names.length; i++) {\n              let itemSpan = h('span', names[i]);\n              let itemLi = h('li', {\n                style: {'margin-bottom': '3px', 'list-style': 'none'}\n              }, [itemSpan]);\n              liArr.push(itemLi);\n            }\n            return isLogic ? h('ul', [liArr]) : h('span', params.row.currentRule);\n          },\n          key: 'currentRule'\n        },\n        {\n          title: '变更后规则',\n          render: (h, params) => {\n            let isLogic = !!(params.row.afterRule && typeof params.row.afterRule === 'object');\n            let names = isLogic ? params.row.afterRule : [];\n            let liArr = [];\n            for (let i = 0; i < names.length; i++) {\n              let itemSpan = h('span', names[i]);\n              let itemLi = h('li', {\n                style: {'margin-bottom': '3px', 'list-style': 'none'}\n              }, [itemSpan]);\n              liArr.push(itemLi);\n            }\n            return isLogic ? h('ul', [liArr]) : h('span', params.row.afterRule);\n          },\n          key: 'afterRule'\n        }\n      ],\n      strategyDataGroup: []\n    };\n  },\n  methods: {\n    // 一个编号下面，多个数组表达式组成的字符数据\n    ruleLogicStr (jsonVal) {\n      let length = jsonVal.fieldsZn ? jsonVal.fieldsZn.length : 0;\n      /// 逻辑符号 把数据库中 两个以上 这种 [\"||\",\"\"] 修改为 [\"\",\"||\"]\n      // let logicsArr = jsonVal.logics;\n      // if (logicsArr && logicsArr.length >= 2) {\n      //   logicsArr.unshift(logicsArr[logicsArr.length - 1]); // 从最后添加到第一个位置\n      //   logicsArr.pop(); // 把最后一个符号删除掉\n      // } else {\n      //   logicsArr = jsonVal.logics;\n      // }\n      // jsonVal.logicArr = logicsArr;\n      // console.log('logics', jsonVal.logics, logicsArr)\n\n      let ruleLogicList = [];\n      let expression = '';\n      for (let i = 0; i < length; i++) {\n        let ruleLogic = {};\n        ruleLogic.leftBracks = /^\\(/g.test(jsonVal.fieldsZn[i]) ? ' ( ' : ' '; // 括号\n        // ruleLogic.rightBracks = !!/\\)$/g.test(jsonVal.fieldsZn[i]); // 括号\n        ruleLogic.rightBracks = /\\)$/g.test(jsonVal.params[i]) ? ' ) ' : ' '; // 括号\n        ruleLogic.field = jsonVal.fieldsZn[i].match(/([^()]+)/g)[0];\n        ruleLogic.operator = ' ' + jsonVal.operators[i] + ' ';\n        ruleLogic.logic = jsonVal.logics[i] + ' ';\n        // ruleLogic.param = parseFloat(jsonVal.params[i]) + '';\n        ruleLogic.param = parseFloat(jsonVal.params[i].match(/([^()]+)/g)[0]) + ' ';\n        ruleLogic.index = i;\n        expression = ruleLogic.leftBracks + ruleLogic.field + ruleLogic.operator + ruleLogic.param + ruleLogic.rightBracks + ruleLogic.logic;\n        ruleLogicList.push(expression);\n      }\n      return ruleLogicList;\n    },\n    ruleDataFormat (item, columnName, ruleItem) {\n      Object.keys(item).forEach((key, i) => {\n        switch (key) {\n          case 'ruleName':\n            if (item.ruleName) {\n              ruleItem.ruleName = {...ruleItem.ruleName, ruleCode: item.ruleCode, nameChange: '规则名称'};\n              ruleItem.ruleName[columnName] = item.ruleName;\n            }\n            break;\n          case 'priority':\n            if (item.priority + '' === '0' || item.priority >= 1) {\n              ruleItem.priority = {...ruleItem.priority, ruleCode: item.ruleCode, nameChange: '规则权重'};\n              ruleItem.priority[columnName] = item.priority;\n            }\n            break;\n          case 'status':\n            if (item.status + '' === '0' || item.status + '' === '1') {\n              ruleItem.status = {...ruleItem.status, ruleCode: item.ruleCode, nameChange: '规则状态'};\n              ruleItem.status[columnName] = item.status + '' === '1' ? '启用' : '禁用';\n            }\n            break;\n          case 'jsonStr':\n            if (item.jsonStr && item.jsonStr.fieldsZn) {\n              ruleItem.jsonStr = {...ruleItem.jsonStr, ruleCode: item.ruleCode, nameChange: '规则逻辑'};\n              ruleItem.jsonStr[columnName] = this.ruleLogicStr(item.jsonStr);\n            }\n            break;\n        }\n      });\n      return ruleItem;\n    },\n    initStrategy () {\n      this.loading = true;\n      // this.options.method = 'GET';\n      this.options.method = 'POST';\n      let url = '/api/rulecenter-service/newBRule/enablingPresetRuleChangeContrast';\n      if (this.options.method === 'GET') {\n        url = url + '?' + Qs.stringify(this.getSid()) + '&' + Qs.stringify(this.authStrategyCfg);\n        delete this.options.body;\n      } else {\n        // this.options.body = Qs.stringify(this.getSid()) + '&' + Qs.stringify(this.authStrategyCfg);\n        url = url + '?' + Qs.stringify(this.getSid())\n        this.options.body = JSON.stringify(this.authStrategyCfg);// 转换为一个 JSON字符串\n      }\n      fetch(url, this.options)\n        .then(response => response.json())\n        .then(({code, data, message}) => {\n          this.loading = false;\n          if (code === '000000') {\n            let groupDataArr = [];\n            // let demoData = JSON.parse('{\"code\":\"000000\",\"data\":[{\"afterAlterationRule\":{\"id\":271122,\"jsonStr\":{\"ruleType\":\"Rule_C_AirTravel_d1\",\"ruleName\":\"航空消费能力较低\",\"priority\":10,\"operators\":[\"<=\"],\"fieldsZn\":[\"航空消费能力等级\"],\"ruleCode\":\"FAA001\",\"params\":[\"23\"],\"logics\":[\"\"],\"fields\":[\"i_AirExpense_score\"]},\"priority\":null,\"ruleCode\":\"FAA001\",\"ruleName\":\"\",\"status\":null},\"currentRule\":{\"id\":471229,\"jsonStr\":{\"ruleType\":\"Rule_C_AirTravel_d1\",\"ruleName\":\"航空消费能力较低\",\"priority\":10,\"operators\":[\"<=\"],\"fieldsZn\":[\"航空消费能力等级\"],\"ruleCode\":\"FAA001\",\"params\":[\"25\"],\"logics\":[\"\"],\"fields\":[\"i_AirExpense_score\"]},\"priority\":null,\"ruleCode\":\"FAA001\",\"ruleName\":\"\",\"status\":null}},{\"afterAlterationRule\":{\"id\":271123,\"jsonStr\":{\"ruleType\":\"Rule_C_AirTravel_d1\",\"ruleName\":\"航空消费能力较高\",\"priority\":5,\"operators\":[\">=\",\"<=\"],\"fieldsZn\":[\"航空消费能力等级\",\"航空消费能力等级\"],\"ruleCode\":\"FAA002\",\"params\":[\"25\",\"59\"],\"logics\":[\"且\",\"\"],\"fields\":[\"i_AirExpense_score\",\"i_AirExpense_score\"]},\"priority\":null,\"ruleCode\":\"FAA002\",\"ruleName\":\"\",\"status\":null},\"currentRule\":{\"id\":471230,\"jsonStr\":{\"ruleType\":\"Rule_C_AirTravel_d1\",\"ruleName\":\"航空消费能力较高\",\"priority\":5,\"operators\":[\">=\",\"<=\"],\"fieldsZn\":[\"航空消费能力等级\",\"航空消费能力等级\"],\"ruleCode\":\"FAA002\",\"params\":[\"25\",\"61\"],\"logics\":[\"且\",\"\"],\"fields\":[\"i_AirExpense_score\",\"i_AirExpense_score\"]},\"priority\":null,\"ruleCode\":\"FAA002\",\"ruleName\":\"\",\"status\":null}}],\"message\":\"成功\"}');\n            // let data = demoData.data;\n            if (data && data.length >= 1) {\n              this.visible = true;\n              data.forEach(item => {\n                // 增加列字段columnName currentRule afterRule\n                let currentRule = this.ruleDataFormat(item.currentRule, 'currentRule', {})\n                let mergeRule = this.ruleDataFormat(item.afterAlterationRule, 'afterRule', currentRule)\n                // mergeRule.jsonStr.afterRule = 'afterAlterationRuleafterAlterationRuleafterAlterationRuleafterAlterationRule'.split('e')\n                Object.keys(mergeRule).forEach((key, i) => {\n                  groupDataArr.push(mergeRule[key]);\n                });\n              });\n            } else {\n              this.visible = false;\n              this.$emit('save-confirm');\n            }\n            this.strategyDataGroup = groupDataArr;\n          } else {\n            this.$Message.error(message || '服务器错误！');\n          }\n        }, reason => {\n          this.$Message.error(reason || '服务器错误！');\n        });\n    },\n    getSid (sessionId = Cookies.get('BR_COMPASS_SESSIONID')) {\n      return {sessionId, t: Date.now()};\n    },\n    resetParams () {\n      this.save_loading = false;\n    },\n    ok () {\n      // this.save_loading = true;\n      this.$emit('save-confirm');\n      this.visible = false;\n      this.resetParams();\n    },\n    cancel () {\n      this.visible = false;\n      this.$emit('input', false);\n      this.resetParams();\n    }\n  },\n  watch: {\n    value (v) {\n      this.visible = v;\n    }\n  },\n  mounted () {\n    this.$parent.$on('presetRuleChangeEvent', (evt) => {\n      this.authStrategyCfg.type = evt.type;\n      this.authStrategyCfg.typeVersion = evt.typeVersion;\n      this.authStrategyCfg.ruleType = evt.ruleType;\n      this.authStrategyCfg.ids = evt.ids;\n      this.initStrategy();\n      this.$forceUpdate();\n    });\n  }\n};\n</script>\n"]}]}