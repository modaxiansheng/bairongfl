{"remainingRequest":"E:\\bairongfl\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\bairongfl\\node_modules\\@bairong\\jax-core\\src\\components\\FullScreen\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\bairongfl\\node_modules\\@bairong\\jax-core\\src\\components\\FullScreen\\index.vue","mtime":499162500000},{"path":"E:\\bairongfl\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\bairongfl\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\bairongfl\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\bairongfl\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\bairongfl\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: 'fullScreen',\n  props: {\n    value: {\n      type: Boolean,\n      default: false\n    }\n  },\n  computed: {\n    showFullScreenBtn () {\n      return window.navigator.userAgent.indexOf('MSIE') < 0;\n    }\n  },\n  methods: {\n    handleFullscreen () {\n      let main = document.body;\n      if (this.value) {\n        if (document.exitFullscreen) {\n          document.exitFullscreen();\n        } else if (document.mozCancelFullScreen) {\n          document.mozCancelFullScreen();\n        } else if (document.webkitCancelFullScreen) {\n          document.webkitCancelFullScreen();\n        } else if (document.msExitFullscreen) {\n          document.msExitFullscreen();\n        }\n      } else {\n        if (main.requestFullscreen) {\n          main.requestFullscreen();\n        } else if (main.mozRequestFullScreen) {\n          main.mozRequestFullScreen();\n        } else if (main.webkitRequestFullScreen) {\n          main.webkitRequestFullScreen();\n        } else if (main.msRequestFullscreen) {\n          main.msRequestFullscreen();\n        }\n      }\n    },\n    handleChange () {\n      this.handleFullscreen();\n    }\n  },\n  created () {\n    let isFullscreen = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.fullScreen || document.mozFullScreen || document.webkitIsFullScreen;\n    isFullscreen = !!isFullscreen;\n    document.addEventListener('fullscreenchange', () => {\n      this.$emit('input', !this.value);\n      this.$emit('on-change', !this.value);\n    });\n    document.addEventListener('mozfullscreenchange', () => {\n      this.$emit('input', !this.value);\n      this.$emit('on-change', !this.value);\n    });\n    document.addEventListener('webkitfullscreenchange', () => {\n      this.$emit('input', !this.value);\n      this.$emit('on-change', !this.value);\n    });\n    document.addEventListener('msfullscreenchange', () => {\n      this.$emit('input', !this.value);\n      this.$emit('on-change', !this.value);\n    });\n    this.$emit('input', isFullscreen);\n  }\n};\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"node_modules/@bairong/jax-core/src/components/FullScreen","sourcesContent":["<template>\n  <div @click=\"handleChange\" v-if=\"showFullScreenBtn\" class=\"full-screen-btn-con\">\n    <Tooltip :content=\"value ? '退出全屏' : '全屏'\" placement=\"bottom\">\n      <Icon :custom=\"value ? 'br-icon br-icon-contract' : 'br-icon br-icon-expand'\" :size=\"20\"></Icon>\n    </Tooltip>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'fullScreen',\n  props: {\n    value: {\n      type: Boolean,\n      default: false\n    }\n  },\n  computed: {\n    showFullScreenBtn () {\n      return window.navigator.userAgent.indexOf('MSIE') < 0;\n    }\n  },\n  methods: {\n    handleFullscreen () {\n      let main = document.body;\n      if (this.value) {\n        if (document.exitFullscreen) {\n          document.exitFullscreen();\n        } else if (document.mozCancelFullScreen) {\n          document.mozCancelFullScreen();\n        } else if (document.webkitCancelFullScreen) {\n          document.webkitCancelFullScreen();\n        } else if (document.msExitFullscreen) {\n          document.msExitFullscreen();\n        }\n      } else {\n        if (main.requestFullscreen) {\n          main.requestFullscreen();\n        } else if (main.mozRequestFullScreen) {\n          main.mozRequestFullScreen();\n        } else if (main.webkitRequestFullScreen) {\n          main.webkitRequestFullScreen();\n        } else if (main.msRequestFullscreen) {\n          main.msRequestFullscreen();\n        }\n      }\n    },\n    handleChange () {\n      this.handleFullscreen();\n    }\n  },\n  created () {\n    let isFullscreen = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.fullScreen || document.mozFullScreen || document.webkitIsFullScreen;\n    isFullscreen = !!isFullscreen;\n    document.addEventListener('fullscreenchange', () => {\n      this.$emit('input', !this.value);\n      this.$emit('on-change', !this.value);\n    });\n    document.addEventListener('mozfullscreenchange', () => {\n      this.$emit('input', !this.value);\n      this.$emit('on-change', !this.value);\n    });\n    document.addEventListener('webkitfullscreenchange', () => {\n      this.$emit('input', !this.value);\n      this.$emit('on-change', !this.value);\n    });\n    document.addEventListener('msfullscreenchange', () => {\n      this.$emit('input', !this.value);\n      this.$emit('on-change', !this.value);\n    });\n    this.$emit('input', isFullscreen);\n  }\n};\n</script>\n<style lang=\"less\" scoped>\n  @import 'index.less';\n</style>\n"]}]}