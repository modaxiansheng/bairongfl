{"remainingRequest":"E:\\bairongfl\\node_modules\\thread-loader\\dist\\cjs.js!E:\\bairongfl\\node_modules\\babel-loader\\lib\\index.js!E:\\bairongfl\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\bairongfl\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\bairongfl\\node_modules\\@bairong\\jax\\src\\components\\rules\\RuleAddEdit.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\bairongfl\\node_modules\\@bairong\\jax\\src\\components\\rules\\RuleAddEdit.vue","mtime":499162500000},{"path":"E:\\bairongfl\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\bairongfl\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\bairongfl\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\bairongfl\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\bairongfl\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.regexp.match\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/**\n * 参数说明：\n * titleName 标题名称  如  编辑规则\n * isAddHandle 当前操作是新建 true、编辑 false、查看'check'。\n *\n *\n */\nexport default {\n  name: 'RuleAddEdit',\n  props: ['titleName', 'isAddHandle', 'ruleType', 'version', 'typeName', 'itemData', 'rulesetKey'],\n  data: function data() {\n    var validateCascade = function validateCascade(rule, value, callback) {\n      if (value === '') {\n        callback(new Error('Please enter your password'));\n      } else {\n        if (value === 2) {\n          callback(new Error('输入值过短！'));\n        } else if (value > 2) {\n          callback(new Error('输入值过长！'));\n        }\n\n        callback(new Error('值过长！'));\n      }\n\n      callback();\n    };\n\n    var validatePass = function validatePass(para, rule, value, callback) {\n      callback();\n    };\n\n    var validateRuleName = function validateRuleName(rule, value, callback) {\n      var pattern = /^[a-zA-Z0-9_-|\\u4E00-\\u9FA5]|\\S\\s{4,56}$/;\n\n      if (value) {\n        if (!pattern.test(value.trim())) {\n          callback(new Error('规则名称不可包含特殊字符，且不能少于四位字符！'));\n        }\n      }\n\n      callback();\n    };\n\n    return {\n      ddd: {\n        validator: validatePass.bind(this, 55),\n        message: '565',\n        trigger: 'change'\n      },\n      isShowValidator: false,\n      cfgRule: {},\n      buttonAnd: '且',\n      buttonOr: '或',\n      logicIndex: 0,\n      proList: [{\n        value: '1',\n        label: '注册'\n      }, {\n        value: '2',\n        label: '登录'\n      }, {\n        value: '3',\n        label: '借款'\n      }, {\n        value: '4',\n        label: '提现'\n      }],\n      selectOperator: [{\n        label: '=',\n        value: '=='\n      }, {\n        label: '>',\n        value: '>'\n      }, {\n        label: '>=',\n        value: '>='\n      }, {\n        label: '<',\n        value: '<'\n      }, {\n        label: '<=',\n        value: '<='\n      }],\n      platformList: [{\n        value: '1',\n        label: 'WEB'\n      }, {\n        value: '2',\n        label: 'IOS'\n      }, {\n        value: '3',\n        label: 'Android'\n      }],\n      isShowLog: false,\n      loading: false,\n      formRule: {\n        ruleset: '',\n        ruleCode: '',\n        ruleName: '',\n        remark: '',\n        priority: '',\n        status: '',\n        ruleTypeStatus: 1,\n        /// ruleTypeStatus Filter 0:预置规则，1:自定义规则\n        ruleLogicList: [{\n          cascade: [],\n          field: '',\n          leftBracks: false,\n          rightBracks: false,\n          logic: '&&',\n          operator: '',\n          param: '',\n          paramMax: Infinity,\n          paramMin: -Infinity,\n          value: 0,\n          isOpen: 1,\n          index: 1\n        }],\n        selectItems: [],\n        items: [{\n          value: '',\n          index: 1,\n          isOpen: 1\n        }]\n      },\n      ruleValidate: {\n        ruleset: [{\n          required: true,\n          message: '归属规则集是必填项',\n          trigger: 'blur'\n        }, {\n          type: 'array',\n          max: 2,\n          message: 'Choose two hobbies at best',\n          trigger: 'change'\n        }],\n        ruleCode: [{\n          required: false,\n          message: '规则编号是必填项',\n          trigger: 'blur'\n        }, {\n          type: 'email',\n          message: 'Incorrect email format',\n          trigger: 'blur'\n        }],\n        ruleName: [{\n          required: true,\n          message: '规则名称是必填项',\n          trigger: 'blur'\n        }, {\n          // pattern: /^[a-zA-Z0-9_-|\\u4E00-\\u9FA5]|\\S\\s{4,56}$/,\n          // message: '规则名称不可包含特殊字符，且不能少于四位字符！',\n          validator: validateRuleName,\n          trigger: 'blur'\n        } // {type: \"string\", required: true, pattern: schema.pattern.email}\n        ],\n        remark: [{\n          required: false,\n          max: 100,\n          message: '规则说明长度最多100个汉字',\n          trigger: 'blur'\n        }],\n        priority: [{\n          // pattern: /^([1-9]|[12]\\d)$,\n          pattern: /^100$|^([0-9]|[0-9]\\d)$/,\n          required: true,\n          message: '规则权重不能空且只能为小于等于100的数字！',\n          trigger: 'change'\n        }],\n        status: [{\n          required: true,\n          type: 'string',\n          message: '规则状态是必填项',\n          trigger: 'change'\n        }],\n        cascade0: [{\n          required: true,\n          pattern: /^\\s+$/g,\n          message: 'The name cannot be empty000001',\n          trigger: 'change'\n        }],\n        cascade1: [{\n          required: true,\n          type: 'array',\n          message: 'The name cannot be empty11',\n          trigger: 'change'\n        }],\n        cascade2: [{\n          required: true,\n          validator: validateCascade,\n          message: 'The name cannot be empty22',\n          trigger: 'change'\n        }],\n        param: [{\n          validator: validateCascade,\n          trigger: 'blur'\n        }],\n        cascade: [{\n          validator: validateCascade,\n          trigger: 'blur'\n        }],\n        ruleLogicList: [{\n          required: true,\n          type: 'array',\n          message: '请选择输入值',\n          trigger: 'change'\n        }]\n      }\n    };\n  },\n  components: {},\n  created: function created() {\n    var _this = this;\n\n    /* 接收新建规则事件 */\n    this.$on('createRuleDataEvent', function (evt) {\n      /// 每次更改数据watch：itemData都会调用init，添加时不传 ;ruleCode 中有\"_yz\"时只传id,ruleCode,priority,---status,\n      if (_this.isAddHandle) {\n        _this.logicIndex = 0; // 只在创建的时候用\n      }\n\n      _this.init();\n\n      _this.$forceUpdate();\n    });\n  },\n  methods: {\n    init: function init() {\n      var _this2 = this;\n\n      // 使用props传递数据  itemData\n      // 添加时不传 ;ruleCode 中有\"_yz\"时只传id,ruleCode,priority,---status,\n      if (this.rulesetKey) {\n        this.formRule = this.itemData;\n        this.formRule.statusCopy = typeof this.formRule.statue === 'boolean' ? this.formRule.status : this.formRule.status === 1; // 1启用 0不启用\n\n        if (this.formRule.jsonstr && this.formRule.jsonstr !== '') {\n          this.formRule.jsonObj = this.formRule.jsonstr ? JSON.parse(this.formRule.jsonstr) : {};\n          var jsonVal = this.formRule.jsonObj;\n          var length = jsonVal.fields ? jsonVal.fields.length : 0; /// 逻辑符号 把数据库中 两个以上 这种 [\"||\",\"\"] 修改为 [\"\",\"||\"]\n\n          var logicsArr = jsonVal.logics;\n\n          if (logicsArr && logicsArr.length >= 2) {\n            logicsArr.unshift(logicsArr[logicsArr.length - 1]); // 从最后添加到第一个位置\n\n            logicsArr.pop(); // 把最后一个符号删除掉\n          } else {\n            logicsArr = jsonVal.logics;\n          }\n\n          jsonVal.logicArr = logicsArr;\n          var ruleLogicList = [];\n\n          for (var i = 0; i < length; i++) {\n            var ruleLogic = {};\n            ruleLogic.leftBracks = !!/^\\(/g.test(jsonVal.fields[i]); // 括号\n\n            ruleLogic.rightBracks = !!/\\)$/g.test(jsonVal.fields[i]); // 括号\n\n            ruleLogic.field = jsonVal.fields[i].match(/([^()]+)/g)[0];\n            ruleLogic.operator = jsonVal.operators[i];\n            ruleLogic.cascade = [ruleLogic.field, ruleLogic.operator];\n            ruleLogic.logic = jsonVal.logicArr[i];\n            ruleLogic.param = parseFloat(jsonVal.params[i]) + '';\n            ruleLogic.index = i;\n            ruleLogic.isOpen = 1; // 逻辑删除标识  一条\n\n            ruleLogic.value = i + i + i;\n            ruleLogicList.push(ruleLogic);\n          }\n\n          setTimeout(function () {\n            _this2.formRule.ruleLogicList = ruleLogicList;\n            _this2.logicIndex = ruleLogicList.length > 1 ? ruleLogicList.length - 1 : 0;\n\n            if (_this2.isAddHandle === 'check') {\n              _this2.ruleLogicLabelHandle();\n            }\n\n            _this2.updateData();\n          }, 50);\n        }\n\n        this.formRule.items = [{\n          value: '',\n          index: 1,\n          logic: '&&',\n          isOpen: 1\n        }];\n        this.formRule.selectOperator = this.selectOperator;\n        var selectItems_ = [];\n\n        var _loop = function _loop() {\n          var operatorArr = []; // 每个规则变量对应的  一组操作符\n\n          var arr = _this2.rulesetKey[i].logs && _this2.rulesetKey[i].logs.split(',') || [];\n\n          if (/.+\\,$/g.test(_this2.rulesetKey[i].logs)) {\n            arr.pop(); // 去除尾部 ,\n          }\n\n          arr.forEach(function (v, j) {\n            var value = '';\n\n            if (v === '=') {\n              value = '==';\n            } else {\n              value = v;\n            }\n\n            var tempObj = {\n              label: v,\n              value: value\n            };\n            operatorArr.push(tempObj);\n          });\n          var selectItem_ = {\n            index: i,\n            label: _this2.rulesetKey[i].key_name,\n            value: _this2.rulesetKey[i].rule_key,\n            datalogs: _this2.rulesetKey[i].logs,\n            children: operatorArr,\n            dataparas: _this2.rulesetKey[i].paras\n          };\n          selectItems_.push(selectItem_);\n        };\n\n        for (var i = 0; i < this.rulesetKey.length; i++) {\n          _loop();\n        }\n\n        this.formRule.selectItems = selectItems_;\n        this.$forceUpdate();\n      }\n    },\n    handleAdd: function handleAdd() {\n      this.logicIndex++;\n      this.formRule.ruleLogicList.push({\n        cascade: [],\n        field: '',\n        leftBracks: false,\n        rightBracks: false,\n        logic: '&&',\n        operator: '',\n        param: '',\n        paramMax: Infinity,\n        paramMin: -Infinity,\n        value: 0,\n        index: this.logicIndex,\n        isOpen: 1\n      });\n      this.$forceUpdate();\n    },\n    handleRemove: function handleRemove(index) {\n      this.formRule.ruleLogicList[index].isOpen = 0;\n      var delIndexMin = false; // 当点击是最小顺序号  且  是打开的 ，进行逻辑显示\n\n      for (var i = 0; i < index; i++) {\n        if (this.formRule.ruleLogicList[i].isOpen === 1) {\n          delIndexMin = true;\n          break;\n        }\n      }\n\n      if (!delIndexMin) {\n        var delIndexMax = index;\n\n        for (var _i = index; _i < this.formRule.ruleLogicList.length; _i++) {\n          if (this.formRule.ruleLogicList[_i].isOpen === 1) {\n            delIndexMax = _i; // 当点击是最小顺序号  且  是打开的isOpen==1 ，対后续第一个打开的   加不显示isShowLogic = 1\n\n            break;\n          }\n        }\n\n        this.formRule.ruleLogicList[delIndexMax].isShowLogic = 1;\n      }\n\n      this.$forceUpdate();\n    },\n    handleChangeOperator: function handleChangeOperator(index, value) {\n      for (var i = 0; i < this.formRule.selectItems.length; i++) {\n        var selectedData = this.formRule.selectItems[i];\n\n        if (selectedData.value === value) {\n          this.formRule['selectOperator' + value] = selectedData.selectOperator;\n          break;\n        }\n      }\n\n      this.updateData();\n    },\n    format: function format(labels, selectedData) {\n      var index = labels.length - 1;\n      var data = selectedData[index] || false;\n\n      if (data && selectedData.length > 1) {\n        var strLength = 44; /// 获得字符串实际长度，中文2，英文1\n\n        var valLength = this._getLength(selectedData[0].label); /// selectedData[0].label.length\n\n\n        var space = '';\n        var shiStr = '' + Math.round(valLength / 10);\n\n        switch (shiStr) {\n          case '1':\n            space = '                   ';\n            break;\n\n          case '2':\n            space = '              ';\n            break;\n\n          case '3':\n            space = '    ';\n            break;\n\n          default:\n            space = '';\n        }\n\n        var arr = [];\n\n        for (var i = 0; i < strLength - valLength; i++) {\n          space = space + ' ';\n          arr.push('');\n        }\n\n        return selectedData[0].label + space + selectedData[1].label;\n      }\n\n      return labels[index];\n    },\n    _getLength: function _getLength(str) {\n      /// 获得字符串实际长度，中文2，英文1\n      /// 参数 str：要获得长度的字符串\n      var realLength = 0,\n          len = str.length,\n          charCode = -1;\n\n      for (var i = 0; i < len; i++) {\n        charCode = str.charCodeAt(i);\n        if (charCode >= 0 && charCode <= 128) realLength += 1;else realLength += 2;\n      }\n\n      return realLength;\n    },\n    selectDataCascader: function selectDataCascader(index, selectData) {\n      if (selectData.length > 1) {\n        var dataparas = selectData[0].dataparas;\n        var itemD = this.formRule.ruleLogicList[index];\n\n        if (dataparas === 'n') {\n          itemD.paramMax = Infinity;\n          itemD.paramMin = -Infinity;\n        } else {\n          var paras = dataparas.split(',');\n          itemD.paramMax = paras[paras.length - 1] ? parseInt(paras[paras.length - 1]) : Infinity;\n          itemD.paramMin = parseInt(paras[0]);\n        }\n      }\n\n      this.updateData();\n    },\n    updateData: function updateData() {\n      // 只数据刷新，否则显示不变\n      this.$forceUpdate();\n    },\n\n    /**\n     * rule code replace _yz\n     * @param code\n     * @reutn String code\n     */\n    formatRuleCode: function formatRuleCode(code) {\n      var ruleCode = '';\n      return code ? code.replace('_yz', '') : '';\n    },\n    ruleValidatorHandle: function ruleValidatorHandle(name) {\n      var _this3 = this;\n\n      this.$refs[name].validate(function (valid) {\n        if (valid) {\n          var formSubmitConfig;\n\n          var flag = _this3.ruleValidatorAction(_this3.formRule.ruleLogicList, function (data) {\n            formSubmitConfig = data;\n          });\n\n          var str_rule = JSON.stringify(formSubmitConfig);\n\n          var isError = _this3.isError(str_rule);\n\n          if (isError === true) {\n            _this3.$Message.warning('规则校验格式错误!');\n          } else {\n            _this3.$Message.success('规则校验格式正确!');\n          }\n\n          _this3.isShowValidator = true;\n        } else {\n          _this3.$Message.error('规则校验格式错误!');\n        }\n      });\n      this.ruleLogicLabelHandle();\n    },\n    ruleLogicLabelHandle: function ruleLogicLabelHandle() {\n      var _this4 = this;\n\n      // 匹配label\n      this.formRule.ruleLogicList && this.formRule.ruleLogicList.map(function (item) {\n        _this4.formRule.selectItems.map(function (o) {\n          if (item.cascade[0] === o.value) {\n            item.label = o.label;\n          }\n        });\n\n        if (item.logic === '&&') {\n          item.logicLabel = '且';\n        }\n\n        if (item.logic === '||') {\n          item.logicLabel = '或';\n        }\n      });\n    },\n    ruleValidatorAction: function ruleValidatorAction(arr, fn) {\n      // logics\n      var empty = []; //\n\n      var fields = []; // 选择规则  包含左右括号 fields:(j_shut_down,j_shut_down),j_shut_down\n\n      var operators = []; // 运算符  operators:==,==,==\n\n      var params = []; // 输入参数 params:1,1,1\n\n      var logics = []; // 关系 logics:&&,||\n\n      var data = null;\n      arr.forEach(function (v, i, arr) {\n        if (v.isOpen === 1) {\n          if (/^\\s*$/g.test(v.param)) {\n            empty.push(i);\n          }\n        }\n      });\n\n      if (empty.length) {\n        this.$Message.warning('输入条件不能为空，请输入');\n        return false;\n      } /// debugger\n\n\n      arr.forEach(function (v, i, arr) {\n        // debugger\n        if (v.isOpen === 1) {\n          var hiddenFields = (v.leftBracks ? '(' : '') + v.cascade[0] + (v.rightBracks ? ')' : ''); // v.cascade[0] v.field\n          // console.log(i+\"field     \"+hiddenFields+\"  ==\",v.field)\n\n          fields.push(hiddenFields);\n          operators.push(v.cascade[1]); // v.operator\n\n          params.push(v.param);\n          logics.push(v.logic);\n        }\n      }); /// 逻辑符号取两个表达式之间的值，把最后一个符号删除掉 old\n      /// logics.pop()\n      /// 逻辑符号 把数据库中 两个以上 这种 [\"||\",\"\"] 修改为 [\"\",\"||\"] 把第一个位置删除掉\n\n      logics.shift();\n      data = {\n        fields: fields.join(','),\n        operators: operators.join(','),\n        params: params.join(','),\n        logics: logics.join(',') /// logics : encodeURIComponent(logics.join(','))\n\n      }; // return;\n\n      fn && fn(data);\n      return true;\n    },\n    isError: function isError(str) {\n      var r = /[)(]/gm,\n          r2 = /\\([^()]*\\)/gm,\n          newStr = str;\n      newStr = newStr.replace(r2, '');\n\n      if (r2.test(newStr)) {\n        arguments.callee(newStr);\n      } else {\n        return r.test(newStr);\n      }\n    },\n    handleAdd1: function handleAdd1() {\n      this.logicIndex++;\n      this.formRule.items.push({\n        value: '',\n        logic: '&&',\n        index: this.logicIndex,\n        isOpen: 1\n      });\n      this.$forceUpdate();\n    },\n    handleRemove1: function handleRemove1(index) {\n      this.formRule.items[index].isOpen = 0;\n      this.$forceUpdate();\n    },\n    handleSubmit: function handleSubmit(name) {\n      var _this5 = this;\n\n      this.$forceUpdate();\n      this.loading = true;\n      setTimeout(function () {\n        _this5.loading = false;\n      }, 1500);\n      this.$refs[name].validate(function (valid) {\n        if (valid) {\n          _this5.formSubmit();\n        } else {\n          _this5.$Message.error('规则校验格式错误!');\n        }\n      });\n    },\n    handleReset: function handleReset(name) {\n      if (this.isAddHandle !== 'check') {\n        this.$refs[name].resetFields();\n      }\n\n      this.$emit('cancel-data', {}, true);\n    },\n    formSubmit: function formSubmit() {\n      var cfg = {\n        status: this.formRule.statusCopy ? 1 : 0,\n        // 1启用 0不启用\n        ruleType: this.ruleType,\n        ruleName: this.formRule.ruleName,\n        ruleCode: this.formRule.ruleCode,\n        remark: this.formRule.remark,\n        priority: this.formRule.priority,\n        typeVersion: this.version,\n        id: this.formRule.id || '',\n        style: 6 // 1基础班规则2标准版贷前规则3标准版贷中规则，4策略API，5验证管理\n\n      }; // id 新增时不传、编辑时必传\n      // 添加时不传 ;ruleCode 中有\"_yz\"时只传id,ruleCode,priority,---status,\n\n      if (this.isAddHandle) {\n        for (var item in cfg) {\n          if (item === 'id' || item === 'ruleCode') {\n            delete cfg[item];\n          }\n        }\n      } //\n      //= ==========================新建编辑验证===============================\n      //\n\n\n      var formSubmitConfig = {};\n      var flag = this.ruleValidatorAction(this.formRule.ruleLogicList, function (data) {\n        formSubmitConfig = data;\n      });\n      var str_rule = JSON.stringify(formSubmitConfig);\n      var isError = this.isError(str_rule);\n\n      if (isError === true) {\n        this.$Message.error('规则校验格式错误!');\n        return;\n      } else {// this.$Message.success('规则校验格式正确!')\n      }\n\n      for (var itemC in formSubmitConfig) {\n        if (!cfg[itemC]) {\n          cfg[itemC] = formSubmitConfig[itemC];\n        }\n      }\n\n      if (flag) {\n        this.cfgRule = cfg;\n        this.$emit('set-data', this.cfgRule, true);\n      } // 重置表单\n      /// this.handleReset('formRule');\n\n\n      this.$refs[name].resetFields();\n    },\n    closeModal: function closeModal() {\n      this.isShowValidator = false;\n    }\n  },\n  mounted: function mounted() {\n    this.init();\n  },\n  watch: {\n    // 监控itemData变量变化的时候，自动执行此函数\n    itemData: {\n      handler: function handler(val, oldVal) {\n        this.itemData = val; // 数据变更时再次更新视图\n\n        this.init();\n      },\n      deep: true\n    }\n  }\n};",{"version":3,"sources":["RuleAddEdit.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"section\">\n    <div class=\"section-title\" v-if=\"titleName\">\n      {{titleName}}\n    </div>\n    <div class=\"section-body\" style=\"max-width:100%;\">\n      <Form ref=\"formRule\" :model=\"formRule\" :rules=\"ruleValidate\" label-position=\"right\" :label-width=\"100\" style=\"width:100%\">\n        <div v-if=\"isAddHandle === 'check'\">\n          <p><span class=\"form-check\">归属规则集</span>{{typeName}}</p>\n          <p><span class=\"form-check\">规则编号</span>{{formatRuleCode(formRule.ruleCode)}}</p>\n          <p><span class=\"form-check\">规则名称</span>{{formRule.ruleName}}</p>\n          <p><span class=\"form-check\">规则说明</span>{{formRule.remark}}</p>\n          <p><span class=\"form-check\">规则权重</span>{{formRule.priority}}</p>\n          <p><span class=\"form-check\">规则状态</span>{{formRule.status ? '启用' : '停用'}}</p>\n          <p><span class=\"form-check\" style=\"padding: 5px 10px 0;\">规则逻辑</span></p>\n          <table style=\"display:inline-block;\" border=\"0\" bordercolor=\"#ffffff\" background=\"#F0F1F5\" border-collapse=\"collapse\">\n            <tbody v-for=\"(v,no) in formRule.ruleLogicList\" v-bind:key=\"no\">\n            <tr style=\"\" v-if=\"v.isOpen\">\n              <td class=\"form-check-logic\" style=\"width: 100px;\"></td>\n              <td class=\"form-check-logic\" style=\"width: 20px;\">{{v.logicLabel}}</td>\n              <td class=\"form-check-logic\" style=\"width: 20px;\">{{v.leftBracks?'(':'&nbsp; '}}</td>\n              <td class=\"form-check-logic\" >{{v.label}}</td>\n              <td class=\"form-check-logic\" style=\"width: 30px;text-align:center;\">{{v.cascade[1]}}</td>\n              <td class=\"form-check-logic\" style=\"width: 40px;\">{{v.param}}</td>\n              <td class=\"form-check-logic\" style=\"width: 10px;\">{{v.rightBracks?')':'&nbsp; '}}</td>\n            </tr>\n            </tbody>\n          </table>\n        </div>\n        <div v-else>\n          <FormItem label=\"归属规则集\" >\n            <Input v-model=\"typeName\" disabled placeholder=\"所属规则集\" />\n          </FormItem>\n          <FormItem label=\"规则编号\">\n            <Input :value=\"formatRuleCode(formRule.ruleCode)\" disabled placeholder=\"规则编号由后台直接生成\" />\n          </FormItem>\n          <FormItem label=\"规则名称\" prop=\"ruleName\">\n            <Input v-model=\"formRule.ruleName\" :disabled=\"formRule.ruleTypeStatus == 0 ? true : false\" type=\"text\" placeholder=\"请输入规则名称 如评分高风险 ...\"></Input>\n          </FormItem>\n          <FormItem label=\"规则说明\" prop=\"remark\">\n            <Input v-model=\"formRule.remark\" type=\"textarea\" :disabled=\"formRule.ruleTypeStatus == 0 ? true : false\" :autosize=\"{minRows: 3,maxRows: 5}\" placeholder=\"请输入规则说明...\"></Input>\n          </FormItem>\n          <FormItem label=\"规则权重\" prop=\"priority\">\n            <Input style=\"width:80px\" v-model=\"formRule.priority\" number placeholder=\"最大值100\" />\n          </FormItem>\n          <FormItem label=\"规则状态\" >\n            <i-switch v-model=\"formRule.statusCopy\" size=\"large\">\n              <span slot=\"open\">启用</span>\n              <span slot=\"close\">停用</span>\n            </i-switch>\n          </FormItem>\n          <FormItem label=\"规则逻辑\" >\n            <Row>\n              <Col span=\"2\">\n                <Button :disabled=\"formRule.ruleTypeStatus == 0 ? true : false\" type=\"primary\" size=\"small\"  @click=\"ruleValidatorHandle('formRule')\" >规则校验</Button>\n              </Col>\n            </Row>\n          </FormItem>\n          <FormItem\n            v-for=\"(item, index) in formRule.ruleLogicList\"\n            v-if=\"false && item.isOpen\"\n            key=\"index\">\n            <Row>\n              <Col span=\"18\">\n                <FormItem label=\"test：\" prop=\"cascade\"\n                          :rules=\"{required: true, message: 'Item cascade' + item.index +' can not be empty cascade', trigger: 'blur'}\">\n                  <Cascader :data=\"formRule.selectItems\" v-model=\"item.cascade\" :render-format=\"format\" placeholder=\"请选择变量名称和计算符号\" @on-change=\"(value,data)=>selectDataCascader(value,data,index,item.cascade)\" style=\"width:300px\"></Cascader>\n                </FormItem>\n                <FormItem label=\"test：\" prop=\"param\"\n                          :rules=\"{required: true, message: 'Item param' + item.index +' can not be empty param', trigger: 'blur'}\">\n                  <Input type=\"text\" v-model=\"item.param\" style=\"width:75px\" placeholder=\"请输入数值...\"></Input>\n                </FormItem>\n                <RadioGroup v-model=\"item.logic\" @on-change=\"updateData\" type=\"button\" size=\"small\">\n                  <Radio label=\"&&\">且</Radio>\n                  <Radio label=\"||\">或</Radio>\n                </RadioGroup>\n                <Input type=\"text\" v-model=\"item.value\" placeholder=\"Enter something...\"></Input>\n              </Col>\n              <Col span=\"4\" offset=\"1\">\n                <Button type=\"dashed\" long @click=\"handleAdd1\" icon=\"plus-round\">Add item</Button>\n                <Button type=\"ghost\" @click=\"handleRemove1(index)\">Delete</Button>\n              </Col>\n            </Row>\n          </FormItem>\n          <FormItem disabled :label-width=\"100\" v-for=\"(item, index) in formRule.ruleLogicList\" v-if=\"item.isOpen\" :key=\"index\" >\n            <Row style=\"margin-left: -100px;\">\n              <Col span=\"1\" style=\"width: 100px;text-align: center;\">\n                <span v-if=\"item.index == 0 || item.isShowLogic == 1 \">&nbsp;&nbsp;&nbsp;</span>\n                <FormItem v-else :prop=\"'ruleLogicList.' + index + '.logic'\"\n                          :rules=\"{required: true, message: '请选择值：且、或 ' + '', trigger: 'change'}\">\n                  <RadioGroup v-model=\"item.logic\" @on-change=\"updateData\" type=\"button\" size=\"small\">\n                    <Radio :disabled=\"formRule.ruleTypeStatus == 0 ? true : false\" label=\"&&\">且</Radio>\n                    <Radio :disabled=\"formRule.ruleTypeStatus == 0 ? true : false\" label=\"||\">或</Radio>\n                  </RadioGroup>\n                </FormItem>\n              </Col>\n              <Col span=\"20\">\n                <!--外层row 是为了 且或变成一行，才嵌套的现象-->\n                <Row class=\"last-form-item\">\n                  <div>\n                    <Switch :disabled=\"formRule.ruleTypeStatus == 0 ? true : false\" v-model=\"item.leftBracks\">\n                      <span slot=\"open\">(</span>\n                      <span slot=\"close\">(</span>\n                    </Switch>\n                  </div>\n                  <div>\n                    <FormItem style=\"padding-left: 5px;\" :prop=\"'ruleLogicList.' + index + '.cascade'\"\n                              :rules=\"{required: true, type: 'array',min: 1, message: '请选择变量名称和计算符号', trigger: 'change'}\" >\n                      <div style=\"clear:both;display: inline-table;min-width: 390px;\">\n                        <Cascader :transfer=\"false\" :disabled=\"formRule.ruleTypeStatus == 0 ? true : false\" :data=\"formRule.selectItems\" v-model=\"item.cascade\" :render-format=\"format\" placeholder=\"请选择变量名称和计算符号\" @on-change=\"(value,data)=>selectDataCascader(index,data)\"></Cascader>\n                      </div>\n                    </FormItem>\n                  </div>\n                  <div>\n                    <!--v-model和:value 要匹配才绑定，label显示用  -->\n                    <FormItem :prop=\"'ruleLogicList.' + index + '.param'\" class=\"special-input-num\"\n                              :rules=\"[{required: true, type:'string', message: '请输入数值', trigger: 'blur'},{pattern: /^[0-9]+([.]{1}[0-9]{1,2}){0,1}$/, message: '整数或最多保留两位小数', trigger: 'change'}]\">\n                      <Input style=\"width: 90px;\" type=\"text\" @on-keyup=\"updateData\" v-model=\"item.param\" :disabled=\"formRule.ruleTypeStatus == 0\" placeholder=\"请输入数值...\"></Input>\n                    </FormItem>\n                  </div>\n                  <div>\n                    <Switch :disabled=\"formRule.ruleTypeStatus == 0 ? true : false\" v-model=\"item.rightBracks\">\n                      <span slot=\"open\">)</span>\n                      <span slot=\"close\">)</span>\n                    </Switch>\n                  </div>\n                  <div>\n                    <Button :disabled=\"formRule.ruleTypeStatus == 0 ? true : false\" type=\"text\" @click=\"handleAdd\" size=\"large\" :style=\"{fontSize: '20px',color: '#3097FE',padding: '0 3px',minWidth:'auto'}\" icon=\"ios-plus-outline\" v-if=\"item.index+1 == formRule.ruleLogicList.length && index < 20\"></Button>\n                    <Button :disabled=\"formRule.ruleTypeStatus == 0 ? true : false\" type=\"text\" icon='ios-minus-outline' size=\"large\" style=\"font-size: 20px;color: #EF444D;padding: 0 3px;min-width:auto;\" @click=\"handleRemove(index)\" v-else></Button>\n                  </div>\n                </Row>\n              </Col>\n            </Row>\n          </FormItem>\n        </div>\n        <FormItem :label-width=\"1\" style=\"text-align: right; padding-top: 20px; margin-bottom: 0px;\">\n          <Button v-if=\"isAddHandle !== 'check'\" :loading=\"loading\" type=\"primary\" @click=\"handleSubmit('formRule')\">保存</Button>\n          <Button type=\"ghost\" @click=\"handleReset('formRule')\" style=\"margin-left: 8px\">取消</Button>\n        </FormItem>\n      </Form>\n    </div>\n\n    <Modal v-model=\"isShowValidator\" width=\"500\" :transfer=\"false\" :mask-closable=\"false\" ok-text=\"保存\" cancel-text=\"取消\">\n      <p slot=\"header\">\n        <span>规则校验格式</span>\n      </p>\n      <div style=\"text-align:center;\">\n        <ul>\n          <li v-for=\"(v,no) in formRule.ruleLogicList\" style=\"list-style: none;\">&nbsp;\n            <Row :gutter=\"16\" v-if=\"v.isOpen\">\n              <Col span=\"1\">\n                    <span v-if=\"v.index == 0 || v.isShowLogic == 1 \">\n                      &nbsp;\n                    </span>\n                <span v-else>\n                      {{ v.logicLabel}}\n                    </span>\n              </Col>\n              <Col span=\"1\">\n                {{ v.leftBracks?'(':'&nbsp; ' }}\n              </Col>\n              <Col span=\"16\">\n                {{ v.label }}\n              </Col>\n              <Col span=\"2\">\n                {{ v.cascade[1] }}\n              </Col>\n              <Col span=\"3\">\n                {{ v.param }}\n              </Col>\n              <Col span=\"1\">\n                {{ v.rightBracks?')':'&nbsp; ' }}\n              </Col>\n            </Row>\n            <Row :gutter=\"16\" v-if=\"false && v.isOpen && no < formRule.ruleLogicList.length-1\">\n              <Col span=\"4\">\n                {{ v.logicLabel}}\n              </Col>\n            </Row>\n          </li>\n        </ul>\n      </div>\n      <div slot=\"footer\" style=\"text-align: center;\">\n        <Button type=\"primary\" size=\"large\" @click=\"closeModal\">关闭</Button>\n      </div>\n    </Modal>\n\n  </div>\n</template>\n\n<script>\n/**\n * 参数说明：\n * titleName 标题名称  如  编辑规则\n * isAddHandle 当前操作是新建 true、编辑 false、查看'check'。\n *\n *\n */\nexport default {\n  name: 'RuleAddEdit',\n  props: ['titleName', 'isAddHandle', 'ruleType', 'version', 'typeName', 'itemData', 'rulesetKey'],\n  data () {\n    const validateCascade = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error('Please enter your password'));\n      } else {\n        if (value === 2) {\n          callback(new Error('输入值过短！'));\n        } else if (value > 2) {\n          callback(new Error('输入值过长！'));\n        }\n        callback(new Error('值过长！'));\n      }\n      callback();\n    };\n    const validatePass = (para, rule, value, callback) => {\n      callback();\n    };\n    const validateRuleName = (rule, value, callback) => {\n      const pattern = /^[a-zA-Z0-9_-|\\u4E00-\\u9FA5]|\\S\\s{4,56}$/;\n      if (value) {\n        if (!pattern.test(value.trim())) {\n          callback(new Error('规则名称不可包含特殊字符，且不能少于四位字符！'));\n        }\n      }\n      callback();\n    };\n    return {\n      ddd: {validator: validatePass.bind(this, 55), message: '565', trigger: 'change'},\n      isShowValidator: false,\n      cfgRule: {},\n      buttonAnd: '且',\n      buttonOr: '或',\n      logicIndex: 0,\n      proList: [{\n        value: '1',\n        label: '注册'\n      }, {\n        value: '2',\n        label: '登录'\n      }, {\n        value: '3',\n        label: '借款'\n      }, {\n        value: '4',\n        label: '提现'\n      }],\n      selectOperator: [\n        {label: '=', value: '=='},\n        {label: '>', value: '>'},\n        {label: '>=', value: '>='},\n        {label: '<', value: '<'},\n        {label: '<=', value: '<='}\n      ],\n      platformList: [{\n        value: '1',\n        label: 'WEB'\n      }, {\n        value: '2',\n        label: 'IOS'\n      }, {\n        value: '3',\n        label: 'Android'\n      }],\n      isShowLog: false,\n      loading: false,\n      formRule: {\n        ruleset: '',\n        ruleCode: '',\n        ruleName: '',\n        remark: '',\n        priority: '',\n        status: '',\n        ruleTypeStatus: 1, /// ruleTypeStatus Filter 0:预置规则，1:自定义规则\n        ruleLogicList: [{\n          cascade: [],\n          field: '',\n          leftBracks: false,\n          rightBracks: false,\n          logic: '&&',\n          operator: '',\n          param: '',\n          paramMax: Infinity,\n          paramMin: -Infinity,\n          value: 0,\n          isOpen: 1,\n          index: 1\n        }],\n        selectItems: [],\n        items: [{\n          value: '',\n          index: 1,\n          isOpen: 1\n        }]\n      },\n      ruleValidate: {\n        ruleset: [{\n          required: true,\n          message: '归属规则集是必填项',\n          trigger: 'blur'\n        }, {\n          type: 'array',\n          max: 2,\n          message: 'Choose two hobbies at best',\n          trigger: 'change'\n        }\n\n        ],\n        ruleCode: [{\n          required: false,\n          message: '规则编号是必填项',\n          trigger: 'blur'\n        }, {\n          type: 'email',\n          message: 'Incorrect email format',\n          trigger: 'blur'\n        }],\n        ruleName: [{\n          required: true,\n          message: '规则名称是必填项',\n          trigger: 'blur'\n        }, {\n          // pattern: /^[a-zA-Z0-9_-|\\u4E00-\\u9FA5]|\\S\\s{4,56}$/,\n          // message: '规则名称不可包含特殊字符，且不能少于四位字符！',\n          validator: validateRuleName,\n          trigger: 'blur'\n        }\n          // {type: \"string\", required: true, pattern: schema.pattern.email}\n        ],\n        remark: [{\n          required: false,\n          max: 100,\n          message: '规则说明长度最多100个汉字',\n          trigger: 'blur'\n        }],\n        priority: [\n          {\n            // pattern: /^([1-9]|[12]\\d)$,\n            pattern: /^100$|^([0-9]|[0-9]\\d)$/,\n            required: true,\n            message: '规则权重不能空且只能为小于等于100的数字！',\n            trigger: 'change'\n          }\n        ],\n        status: [{\n          required: true,\n          type: 'string',\n          message: '规则状态是必填项',\n          trigger: 'change'\n        }],\n        cascade0: [\n          { required: true, pattern: /^\\s+$/g, message: 'The name cannot be empty000001', trigger: 'change' }\n        ],\n        cascade1: [\n          { required: true, type: 'array', message: 'The name cannot be empty11', trigger: 'change' }\n        ],\n        cascade2: [\n          { required: true, validator: validateCascade, message: 'The name cannot be empty22', trigger: 'change' }\n        ],\n        param: [\n          { validator: validateCascade, trigger: 'blur' }\n        ],\n        cascade: [\n          { validator: validateCascade, trigger: 'blur' }\n        ],\n        ruleLogicList: [{\n          required: true,\n          type: 'array',\n          message: '请选择输入值',\n          trigger: 'change'\n        }]\n      }\n    };\n  },\n  components: {\n  },\n  created () {\n    /* 接收新建规则事件 */\n    this.$on('createRuleDataEvent', (evt) => {\n      /// 每次更改数据watch：itemData都会调用init，添加时不传 ;ruleCode 中有\"_yz\"时只传id,ruleCode,priority,---status,\n      if (this.isAddHandle) {\n        this.logicIndex = 0; // 只在创建的时候用\n      }\n      this.init();\n      this.$forceUpdate();\n    });\n  },\n  methods: {\n    init: function () {\n      // 使用props传递数据  itemData\n      // 添加时不传 ;ruleCode 中有\"_yz\"时只传id,ruleCode,priority,---status,\n      if (this.rulesetKey) {\n        this.formRule = this.itemData;\n        this.formRule.statusCopy = typeof this.formRule.statue === 'boolean' ? this.formRule.status : this.formRule.status === 1;// 1启用 0不启用\n        if (this.formRule.jsonstr && this.formRule.jsonstr !== '') {\n          this.formRule.jsonObj = this.formRule.jsonstr ? JSON.parse(this.formRule.jsonstr) : {};\n          let jsonVal = this.formRule.jsonObj;\n          let length = jsonVal.fields ? jsonVal.fields.length : 0;\n\n          /// 逻辑符号 把数据库中 两个以上 这种 [\"||\",\"\"] 修改为 [\"\",\"||\"]\n          let logicsArr = jsonVal.logics;\n          if (logicsArr && logicsArr.length >= 2) {\n            logicsArr.unshift(logicsArr[logicsArr.length - 1]); // 从最后添加到第一个位置\n            logicsArr.pop(); // 把最后一个符号删除掉\n          } else {\n            logicsArr = jsonVal.logics;\n          }\n          jsonVal.logicArr = logicsArr;\n\n          let ruleLogicList = [];\n          for (var i = 0; i < length; i++) {\n            let ruleLogic = {};\n            ruleLogic.leftBracks = !!/^\\(/g.test(jsonVal.fields[i]); // 括号\n            ruleLogic.rightBracks = !!/\\)$/g.test(jsonVal.fields[i]); // 括号\n            ruleLogic.field = jsonVal.fields[i].match(/([^()]+)/g)[0];\n            ruleLogic.operator = jsonVal.operators[i];\n            ruleLogic.cascade = [ruleLogic.field, ruleLogic.operator];\n\n            ruleLogic.logic = jsonVal.logicArr[i];\n\n            ruleLogic.param = parseFloat(jsonVal.params[i]) + '';\n\n            ruleLogic.index = i;\n            ruleLogic.isOpen = 1; // 逻辑删除标识  一条\n            ruleLogic.value = i + i + i;\n\n            ruleLogicList.push(ruleLogic);\n          }\n          setTimeout(() => {\n            this.formRule.ruleLogicList = ruleLogicList;\n            this.logicIndex = ruleLogicList.length > 1 ? ruleLogicList.length - 1 : 0;\n            if (this.isAddHandle === 'check') {\n              this.ruleLogicLabelHandle();\n            }\n            this.updateData();\n          }, 50);\n        }\n\n        this.formRule.items = [\n          {\n            value: '',\n            index: 1,\n            logic: '&&',\n            isOpen: 1\n          }\n        ];\n        this.formRule.selectOperator = this.selectOperator;\n\n        let selectItems_ = [];\n\n        for (var i = 0; i < this.rulesetKey.length; i++) {\n          let operatorArr = [];// 每个规则变量对应的  一组操作符\n          let arr = (this.rulesetKey[i].logs && this.rulesetKey[i].logs.split(',')) || [];\n          if (/.+\\,$/g.test(this.rulesetKey[i].logs)) {\n            arr.pop(); // 去除尾部 ,\n          }\n          arr.forEach(function (v, j) {\n            let value = '';\n            if (v === '=') {\n              value = '==';\n            } else {\n              value = v;\n            }\n            let tempObj = {label: v, value: value};\n            operatorArr.push(tempObj);\n          });\n\n          let selectItem_ = {\n            index: i,\n            label: this.rulesetKey[i].key_name,\n            value: this.rulesetKey[i].rule_key,\n            datalogs: this.rulesetKey[i].logs,\n            children: operatorArr,\n            dataparas: this.rulesetKey[i].paras\n          };\n          selectItems_.push(selectItem_);\n        }\n\n        this.formRule.selectItems = selectItems_;\n\n        this.$forceUpdate();\n      }\n    },\n    handleAdd () {\n      this.logicIndex++;\n      this.formRule.ruleLogicList.push({\n        cascade: [],\n        field: '',\n        leftBracks: false,\n        rightBracks: false,\n        logic: '&&',\n        operator: '',\n        param: '',\n        paramMax: Infinity,\n        paramMin: -Infinity,\n        value: 0,\n        index: this.logicIndex,\n        isOpen: 1\n      });\n\n      this.$forceUpdate();\n    },\n\n    handleRemove (index) {\n      this.formRule.ruleLogicList[index].isOpen = 0;\n      let delIndexMin = false; // 当点击是最小顺序号  且  是打开的 ，进行逻辑显示\n      for (let i = 0; i < index; i++) {\n        if (this.formRule.ruleLogicList[i].isOpen === 1) {\n          delIndexMin = true;\n          break;\n        }\n      }\n      if (!delIndexMin) {\n        let delIndexMax = index;\n        for (let i = index; i < this.formRule.ruleLogicList.length; i++) {\n          if (this.formRule.ruleLogicList[i].isOpen === 1) {\n            delIndexMax = i; // 当点击是最小顺序号  且  是打开的isOpen==1 ，対后续第一个打开的   加不显示isShowLogic = 1\n            break;\n          }\n        }\n        this.formRule.ruleLogicList[delIndexMax].isShowLogic = 1;\n      }\n      this.$forceUpdate();\n    },\n    handleChangeOperator (index, value) {\n      for (var i = 0; i < this.formRule.selectItems.length; i++) {\n        let selectedData = this.formRule.selectItems[i];\n        if (selectedData.value === value) {\n          this.formRule['selectOperator' + value] = selectedData.selectOperator;\n          break;\n        }\n      }\n      this.updateData();\n    },\n    format (labels, selectedData) {\n      const index = labels.length - 1;\n      const data = selectedData[index] || false;\n      if (data && selectedData.length > 1) {\n        let strLength = 44;\n        /// 获得字符串实际长度，中文2，英文1\n        let valLength = this._getLength(selectedData[0].label);/// selectedData[0].label.length\n        let space = '';\n        let shiStr = '' + Math.round(valLength / 10);\n        switch (shiStr) {\n          case '1' :\n            space = '                   ';\n            break;\n          case '2' :\n            space = '              ';\n            break;\n          case '3' :\n            space = '    ';\n            break;\n          default :\n            space = '';\n        }\n        let arr = [];\n        for (var i = 0; i < (strLength - valLength); i++) {\n          space = space + ' ';\n          arr.push('');\n        }\n        return selectedData[0].label + space + selectedData[1].label;\n      }\n      return labels[index];\n    },\n    _getLength (str) {\n      /// 获得字符串实际长度，中文2，英文1\n      /// 参数 str：要获得长度的字符串\n      var realLength = 0, len = str.length, charCode = -1;\n      for (var i = 0; i < len; i++) {\n        charCode = str.charCodeAt(i);\n        if (charCode >= 0 && charCode <= 128) realLength += 1;\n        else realLength += 2;\n      }\n      return realLength;\n    },\n    selectDataCascader (index, selectData) {\n\n      if (selectData.length > 1) {\n        let dataparas = selectData[0].dataparas;\n        let itemD = this.formRule.ruleLogicList[index];\n        if (dataparas === 'n') {\n          itemD.paramMax = Infinity;\n          itemD.paramMin = -Infinity;\n        } else {\n          let paras = dataparas.split(',');\n          itemD.paramMax = paras[paras.length - 1] ? parseInt(paras[paras.length - 1]) : Infinity;\n          itemD.paramMin = parseInt(paras[0]);\n        }\n      }\n\n      this.updateData();\n    },\n    updateData () {\n      // 只数据刷新，否则显示不变\n      this.$forceUpdate();\n    },\n    /**\n     * rule code replace _yz\n     * @param code\n     * @reutn String code\n     */\n    formatRuleCode (code) {\n      let ruleCode = '';\n      return code ? code.replace('_yz', '') : '';\n    },\n    ruleValidatorHandle (name) {\n      this.$refs[name].validate((valid) => {\n        if (valid) {\n          let formSubmitConfig;\n          var flag = this.ruleValidatorAction(this.formRule.ruleLogicList, function (data) {\n            formSubmitConfig = data;\n          });\n          var str_rule = JSON.stringify(formSubmitConfig);\n          var isError = this.isError(str_rule);\n          if (isError === true) {\n            this.$Message.warning('规则校验格式错误!');\n          } else {\n            this.$Message.success('规则校验格式正确!');\n          }\n          this.isShowValidator = true;\n        } else {\n          this.$Message.error('规则校验格式错误!');\n        }\n      });\n      this.ruleLogicLabelHandle();\n    },\n    ruleLogicLabelHandle () {\n      // 匹配label\n      this.formRule.ruleLogicList && this.formRule.ruleLogicList.map(item => {\n        this.formRule.selectItems.map(o => {\n          if (item.cascade[0] === o.value) {\n            item.label = o.label;\n          }\n        });\n        if (item.logic === '&&') {\n          item.logicLabel = '且';\n        }\n        if (item.logic === '||') {\n          item.logicLabel = '或';\n        }\n      });\n    },\n    ruleValidatorAction: function (arr, fn) {\n      // logics\n      var empty = []; //\n      var fields = []; // 选择规则  包含左右括号 fields:(j_shut_down,j_shut_down),j_shut_down\n      var operators = []; // 运算符  operators:==,==,==\n      var params = []; // 输入参数 params:1,1,1\n      var logics = []; // 关系 logics:&&,||\n      var data = null;\n      arr.forEach(function (v, i, arr) {\n        if (v.isOpen === 1) {\n          if (/^\\s*$/g.test(v.param)) {\n            empty.push(i);\n          }\n        }\n      });\n      if (empty.length) {\n        this.$Message.warning('输入条件不能为空，请输入');\n        return false;\n      }\n      /// debugger\n      arr.forEach(function (v, i, arr) {\n        // debugger\n        if (v.isOpen === 1) {\n          var hiddenFields = (v.leftBracks ? '(' : '') + v.cascade[0] + (v.rightBracks ? ')' : '');// v.cascade[0] v.field\n          // console.log(i+\"field     \"+hiddenFields+\"  ==\",v.field)\n          fields.push(hiddenFields);\n          operators.push(v.cascade[1]);// v.operator\n          params.push(v.param);\n          logics.push(v.logic);\n        }\n      });\n      /// 逻辑符号取两个表达式之间的值，把最后一个符号删除掉 old\n      /// logics.pop()\n      /// 逻辑符号 把数据库中 两个以上 这种 [\"||\",\"\"] 修改为 [\"\",\"||\"] 把第一个位置删除掉\n      logics.shift();\n\n      data = {\n        fields: fields.join(','),\n        operators: operators.join(','),\n        params: params.join(','),\n        logics: logics.join(',') /// logics : encodeURIComponent(logics.join(','))\n      };\n\n      // return;\n      fn && fn(data);\n      return true;\n    },\n    isError: function (str) {\n      var r = /[)(]/gm,\n        r2 = /\\([^()]*\\)/gm,\n        newStr = str;\n      newStr = newStr.replace(r2, '');\n      if (r2.test(newStr)) {\n        arguments.callee(newStr);\n      } else {\n        return r.test(newStr);\n      }\n    },\n    handleAdd1 () {\n      this.logicIndex++;\n\n      this.formRule.items.push({\n\n        value: '',\n        logic: '&&',\n        index: this.logicIndex,\n        isOpen: 1\n      });\n      this.$forceUpdate();\n    },\n    handleRemove1 (index) {\n      this.formRule.items[index].isOpen = 0;\n      this.$forceUpdate();\n    },\n    handleSubmit (name) {\n      this.$forceUpdate();\n      this.loading = true;\n      setTimeout(() => {\n        this.loading = false;\n      }, 1500);\n\n      this.$refs[name].validate((valid) => {\n        if (valid) {\n          this.formSubmit();\n        } else {\n          this.$Message.error('规则校验格式错误!');\n        }\n      });\n\n    },\n    handleReset (name) {\n      if (this.isAddHandle !== 'check') {\n        this.$refs[name].resetFields();\n      }\n      this.$emit('cancel-data', {}, true);\n    },\n    formSubmit () {\n      var cfg = {\n        status: this.formRule.statusCopy ? 1 : 0, // 1启用 0不启用\n        ruleType: this.ruleType,\n        ruleName: this.formRule.ruleName,\n        ruleCode: this.formRule.ruleCode,\n        remark: this.formRule.remark,\n        priority: this.formRule.priority,\n        typeVersion: this.version,\n        id: this.formRule.id || '',\n        style: 6 // 1基础班规则2标准版贷前规则3标准版贷中规则，4策略API，5验证管理\n      };\n      // id 新增时不传、编辑时必传\n      // 添加时不传 ;ruleCode 中有\"_yz\"时只传id,ruleCode,priority,---status,\n      if (this.isAddHandle) {\n        for (var item in cfg) {\n          if (item === 'id' || item === 'ruleCode') {\n            delete cfg[item];\n          }\n        }\n      }\n\n      //\n      //= ==========================新建编辑验证===============================\n      //\n\n      let formSubmitConfig = {};\n      var flag = this.ruleValidatorAction(this.formRule.ruleLogicList, function (data) {\n        formSubmitConfig = data;\n      });\n\n      var str_rule = JSON.stringify(formSubmitConfig);\n      var isError = this.isError(str_rule);\n      if (isError === true) {\n        this.$Message.error('规则校验格式错误!');\n        return;\n      } else {\n        // this.$Message.success('规则校验格式正确!')\n      }\n\n      for (var itemC in formSubmitConfig) {\n        if (!cfg[itemC]) {\n          cfg[itemC] = formSubmitConfig[itemC];\n        }\n      }\n\n      if (flag) {\n        this.cfgRule = cfg;\n        this.$emit('set-data', this.cfgRule, true);\n      }\n      // 重置表单\n      /// this.handleReset('formRule');\n      this.$refs[name].resetFields();\n    },\n    closeModal: function () {\n      this.isShowValidator = false;\n    }\n  },\n  mounted: function () {\n    this.init();\n  },\n  watch: {\n    // 监控itemData变量变化的时候，自动执行此函数\n    itemData: {\n      handler: function (val, oldVal) {\n        this.itemData = val;\n        // 数据变更时再次更新视图\n        this.init();\n      },\n      deep: true\n    }\n  }\n};\n</script>\n\n<style>\n  .section .section-body .form-check{\n    width: 100px;\n    display:inline-block;\n    text-align:right;\n    padding: 5px 10px;\n  }\n  .section .section-body .form-check-logic{\n    background-color:#F0F1F5;\n    height: 20px;\n    border: none;\n  }\n  .section .special-input-num .ivu-form-item-error-tip{\n    white-space: nowrap;\n  }\n  .section .ivu-form-item .ivu-form-item{\n    margin-bottom: 0;\n  }\n  .section .last-form-item>div{\n    float: left;\n    padding-left: 20px;\n  }\n  .section .last-form-item>div:first-child{\n    padding: 0;\n  }\n</style>\n"],"sourceRoot":"node_modules/@bairong/jax/src/components/rules"}]}