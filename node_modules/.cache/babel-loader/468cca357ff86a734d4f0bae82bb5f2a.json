{"remainingRequest":"E:\\fate\\federal-study-vue\\node_modules\\babel-loader\\lib\\index.js!E:\\fate\\federal-study-vue\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\fate\\federal-study-vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\fate\\federal-study-vue\\node_modules\\@bairong\\jax-core\\src\\components\\BrMusic\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\fate\\federal-study-vue\\node_modules\\@bairong\\jax-core\\src\\components\\BrMusic\\index.vue","mtime":499162500000},{"path":"E:\\fate\\federal-study-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\fate\\federal-study-vue\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\fate\\federal-study-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\fate\\federal-study-vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/**\r\n * @author jun.li@100credit.com\r\n * @prop { String } src 音频的请求路径(必填)\r\n * @prop { Object } params 请求参数\r\n * @prop { Number } initVolume 初始音量（1-100）\r\n * @prop { Boolean } autoPlay 是否自动播放\r\n * @prop { String } downLoadText 下载文件的名字（不传则不开启下载功能）\r\n *\r\n * @method musicToggle\r\n * @param { bool } 切换开关播放状态（不传参数默认切换到相反的状态）\r\n *\r\n * @event audioToggle 状态切换完后触发\r\n * @type { Boolean } 当前播放状态\r\n *\r\n * @event ended 音频播放完后触发\r\n * @type { Object } 当前音频的params用来区分结束的是哪个音频\r\n */\nimport xhr from \"../utils/xhr\";\nxhr.defaultConfig = {\n  responseType: 'arraybuffer'\n};\nvar id = 1; // 自增保证每个audio都是唯一的\n\nvar currentPlay = null; // 下次播放之前把正在播放的audio暂停\n\nexport default {\n  name: 'BrMusic',\n  props: {\n    // 请求路径\n    src: {\n      type: String,\n      require: true\n    },\n    // 请求参数\n    params: {\n      type: Object\n    },\n    // 初始音量\n    initVolume: {\n      type: Number,\n      default: 50\n    },\n    // 自动播放\n    autoPlay: {\n      type: Boolean,\n      default: true\n    },\n    downLoadText: {\n      type: String\n    }\n  },\n  data: function data() {\n    return {\n      audioToggle: false,\n      length: 0,\n      duration: null,\n      nowDuration: 0,\n      voiceShow: false,\n      voice: this.initVolume,\n      musicUrl: '',\n      id: 1\n    };\n  },\n  methods: {\n    // audio开关\n    musicToggle: function musicToggle(bool) {\n      var _this = this;\n\n      this.audioToggle = bool === undefined ? !this.audioToggle : bool;\n\n      if (this.audioToggle && !this.musicUrl) {\n        this.firstOpen().then(function () {\n          // 监听音乐正在播放\n          currentPlay && currentPlay.pause();\n\n          _this.$refs['audio' + _this.id].play();\n\n          currentPlay = _this.$refs['audio' + _this.id];\n\n          _this.$refs['audio' + _this.id].addEventListener('timeupdate', _this.audioListener, true);\n\n          _this.$refs['audio' + _this.id].addEventListener('ended', function () {\n            _this.$emit('ended', _this.params);\n          }, false);\n        }, function (err) {\n          // console.log(err);\n          _this.$emit('on-error', err);\n        });\n      } else {\n        if (this.audioToggle) {\n          currentPlay && currentPlay.pause();\n          this.$refs['audio' + this.id].play();\n          currentPlay = this.$refs['audio' + this.id];\n        } else {\n          this.$refs['audio' + this.id].pause();\n          currentPlay = null;\n        }\n\n        this.$emit('audioToggle', this.audioToggle);\n      }\n    },\n    // 请求音频文件\n    firstOpen: function firstOpen() {\n      var _this2 = this;\n\n      return xhr({\n        type: 'GET',\n        url: this.src,\n        data: this.params || {},\n        success: function success(res) {\n          var audioBuffer = res.slice();\n          var ctx = new AudioContext();\n          ctx.decodeAudioData(audioBuffer, function (buffer) {\n            // 处理成功返回的数据类型为AudioBuffer\n            _this2.duration = buffer.duration;\n          }, function (e) {\n            // console.info('处理出错');\n            _this2.$emit('on-error', e);\n          });\n          var urlObject = window.URL || window.webkitURL || window;\n          var downloadData = new Blob([res], {\n            type: 'audio/wav'\n          });\n          _this2.musicUrl = urlObject.createObjectURL(downloadData);\n        },\n        error: function error(err) {\n          // console.log(res);\n          this.$emit('on-error', err);\n        }\n      });\n    },\n    // 监听audio播放进度，单独写一个函数组件注销时移除监听事件\n    audioListener: function audioListener() {\n      // 修改目前的ranger位置\n      this.length = this.duration ? this.$refs['audio' + this.id].currentTime * 100 / this.duration : 0; // 修改目前的播放时长\n\n      this.nowDuration = this.$refs['audio' + this.id].currentTime;\n\n      if (parseInt(this.nowDuration) >= parseInt(this.duration)) {\n        this.audioToggle = false;\n      }\n    },\n    changeLength: function changeLength() {\n      // 调节进度\n      if (this.musicUrl) {\n        this.$refs['audio' + this.id].currentTime = this.length * this.duration / 100;\n      }\n    },\n    voiceToggle: function voiceToggle() {\n      // 调节音量显示\n      if (this.musicUrl) {\n        this.voiceShow = !this.voiceShow;\n      }\n    },\n    changeVoice: function changeVoice() {\n      // 调节音量\n      this.$refs['audio' + this.id].volume = this.voice / 100;\n    },\n    paramsString: function paramsString() {\n      if (this.params) {\n        var string = '?';\n\n        for (var key in this.params) {\n          string += key + '=' + this.params[key] + '&';\n        }\n\n        return string.slice(0, -1);\n      }\n\n      return 'javascript:;';\n    }\n  },\n  mounted: function mounted() {\n    this.id = id++;\n\n    if (this.autoPlay) {\n      this.musicToggle();\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.$refs['audio' + this.id].removeEventListener('timeupdate', this.audioListener, true);\n  }\n};",{"version":3,"sources":["index.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <div class=\"music-wrap\">\r\n    <div class=\"my-music\">\r\n      <div class=\"music-body\">\r\n        <Icon type=\"play\" v-show=\"!audioToggle\" @click=\"musicToggle()\"></Icon>\r\n        <Icon type=\"pause\" v-show=\"audioToggle\" @click=\"musicToggle()\"></Icon>\r\n      </div>\r\n      <div class=\"music-length\">\r\n        <input type=\"range\" min=\"0\" max=\"100\" v-model=\"length\" @input=\"changeLength\">\r\n      </div>\r\n      <div class=\"music-duration\">\r\n        {{Math.floor(nowDuration/60)+':'+(nowDuration%60/100).toFixed(2).slice(-2)}}/{{Math.floor(duration/60)+':'+(duration%60/100).toFixed(2).slice(-2)}}\r\n      </div>\r\n      <div class=\"music-voice\">\r\n        <Icon v-show=\"+voice\" type=\"volume-high\" @click=\"voiceToggle\">\r\n        </Icon>\r\n        <Icon v-show=\"!+voice\" type=\"android-volume-off\" @click=\"voiceToggle\">\r\n        </Icon>\r\n        <div class=\"voice-range\" v-show=\"voiceShow\">\r\n          <input type=\"range\" min=\"0\" max=\"100\" v-model=\"voice\" @input=\"changeVoice()\">\r\n        </div>\r\n      </div>\r\n      <div class=\"down-load-file\" v-show=\"downLoadText\">\r\n        <a :href=\"src + paramsString()\" :download=\"downLoadText\">\r\n          <Icon type=\"archive\"></Icon>\r\n        </a>\r\n      </div>\r\n      <audio :ref=\"'audio' + id\" style=\"display:none;\" :src=\"musicUrl\" controls=\"controls\" type=\"audio/wav\">\r\n      </audio>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n/**\r\n * @author jun.li@100credit.com\r\n * @prop { String } src 音频的请求路径(必填)\r\n * @prop { Object } params 请求参数\r\n * @prop { Number } initVolume 初始音量（1-100）\r\n * @prop { Boolean } autoPlay 是否自动播放\r\n * @prop { String } downLoadText 下载文件的名字（不传则不开启下载功能）\r\n *\r\n * @method musicToggle\r\n * @param { bool } 切换开关播放状态（不传参数默认切换到相反的状态）\r\n *\r\n * @event audioToggle 状态切换完后触发\r\n * @type { Boolean } 当前播放状态\r\n *\r\n * @event ended 音频播放完后触发\r\n * @type { Object } 当前音频的params用来区分结束的是哪个音频\r\n */\r\n\r\nimport xhr from '../utils/xhr';\r\n\r\nxhr.defaultConfig = {\r\n  responseType: 'arraybuffer'\r\n};\r\nlet id = 1; // 自增保证每个audio都是唯一的\r\nlet currentPlay = null; // 下次播放之前把正在播放的audio暂停\r\n\r\nexport default {\r\n  name: 'BrMusic',\r\n  props: {\r\n    // 请求路径\r\n    src: {\r\n      type: String,\r\n      require: true\r\n    },\r\n    // 请求参数\r\n    params: {\r\n      type: Object\r\n    },\r\n    // 初始音量\r\n    initVolume: {\r\n      type: Number,\r\n      default: 50\r\n    },\r\n    // 自动播放\r\n    autoPlay: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    downLoadText: {\r\n      type: String\r\n    }\r\n  },\r\n  data () {\r\n    return {\r\n      audioToggle: false,\r\n      length: 0,\r\n      duration: null,\r\n      nowDuration: 0,\r\n      voiceShow: false,\r\n      voice: this.initVolume,\r\n      musicUrl: '',\r\n      id: 1\r\n    };\r\n  },\r\n  methods: {\r\n    // audio开关\r\n    musicToggle (bool) {\r\n      this.audioToggle = bool === undefined ? !this.audioToggle : bool;\r\n      if (this.audioToggle && !this.musicUrl) {\r\n        this.firstOpen().then(() => {\r\n          // 监听音乐正在播放\r\n          currentPlay && currentPlay.pause();\r\n          this.$refs['audio' + this.id].play();\r\n          currentPlay = this.$refs['audio' + this.id];\r\n          this.$refs['audio' + this.id].addEventListener('timeupdate', this.audioListener, true);\r\n          this.$refs['audio' + this.id].addEventListener('ended', () => {\r\n            this.$emit('ended', this.params);\r\n          }, false);\r\n        }, err => {\r\n          // console.log(err);\r\n          this.$emit('on-error', err);\r\n        });\r\n      } else {\r\n        if (this.audioToggle) {\r\n          currentPlay && currentPlay.pause();\r\n          this.$refs['audio' + this.id].play();\r\n          currentPlay = this.$refs['audio' + this.id];\r\n        } else {\r\n          this.$refs['audio' + this.id].pause();\r\n          currentPlay = null;\r\n        }\r\n        this.$emit('audioToggle', this.audioToggle);\r\n      }\r\n    },\r\n    // 请求音频文件\r\n    firstOpen () {\r\n      return xhr({\r\n        type: 'GET',\r\n        url: this.src,\r\n        data: this.params || {},\r\n        success: (res) => {\r\n          let audioBuffer = res.slice();\r\n          let ctx = new AudioContext();\r\n          ctx.decodeAudioData(audioBuffer, (buffer) => {\r\n            // 处理成功返回的数据类型为AudioBuffer\r\n            this.duration = buffer.duration;\r\n          }, (e) => {\r\n            // console.info('处理出错');\r\n            this.$emit('on-error', e);\r\n          });\r\n          let urlObject = window.URL || window.webkitURL || window;\r\n          let downloadData = new Blob([res], {type: 'audio/wav'});\r\n          this.musicUrl = urlObject.createObjectURL(downloadData);\r\n        },\r\n        error: function (err) {\r\n          // console.log(res);\r\n          this.$emit('on-error', err);\r\n        }\r\n      });\r\n    },\r\n    // 监听audio播放进度，单独写一个函数组件注销时移除监听事件\r\n    audioListener () {\r\n      // 修改目前的ranger位置\r\n      this.length = this.duration ? (this.$refs['audio' + this.id].currentTime * 100 / this.duration) : 0;\r\n      // 修改目前的播放时长\r\n      this.nowDuration = this.$refs['audio' + this.id].currentTime;\r\n      if (parseInt(this.nowDuration) >= parseInt(this.duration)) {\r\n        this.audioToggle = false;\r\n      }\r\n    },\r\n    changeLength () { // 调节进度\r\n      if (this.musicUrl) {\r\n        this.$refs['audio' + this.id].currentTime = this.length * this.duration / 100;\r\n      }\r\n    },\r\n    voiceToggle () { // 调节音量显示\r\n      if (this.musicUrl) {\r\n        this.voiceShow = !this.voiceShow;\r\n      }\r\n    },\r\n    changeVoice () { // 调节音量\r\n      this.$refs['audio' + this.id].volume = this.voice / 100;\r\n    },\r\n    paramsString () {\r\n      if (this.params) {\r\n        let string = '?';\r\n        for (let key in this.params) {\r\n          string += key + '=' + this.params[key] + '&';\r\n        }\r\n        return string.slice(0, -1);\r\n      }\r\n      return 'javascript:;';\r\n    }\r\n  },\r\n  mounted () {\r\n    this.id = id++;\r\n    if (this.autoPlay) {\r\n      this.musicToggle();\r\n    }\r\n  },\r\n  beforeDestroy () {\r\n    this.$refs['audio' + this.id].removeEventListener('timeupdate', this.audioListener, true);\r\n  }\r\n};\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n.music-wrap {\r\n  &::before,\r\n  &::after {\r\n    content: '';\r\n    display: block;\r\n    clear: both;\r\n  }\r\n}\r\n\r\n.my-music {\r\n  float: left;\r\n  height: 30px;\r\n  padding: 6px;\r\n  background: #eee;\r\n\r\n  > div {\r\n    float: left;\r\n  }\r\n\r\n  .music-body {\r\n    width: 17px;\r\n    padding: 0 5px;\r\n  }\r\n\r\n  .music-length input[type=range] {\r\n    -webkit-appearance: none;\r\n\r\n    // 这个属性设置使填充进度条时的图形为圆角\r\n  }\r\n\r\n  .voice-range input {\r\n    width: 50px;\r\n    height: 20px;\r\n\r\n    &[type=range]::-webkit-slider-runnable-track {\r\n      height: 5px;\r\n      background: #0d1112;\r\n      // box-shadow: 0 1px 1px #def3f8, inset 0 .125em .125em #0d1112; // 轨道内置阴影效果\r\n    }\r\n\r\n    &[type=range]::-webkit-slider-thumb {\r\n      margin-top: -8px;\r\n    }\r\n  }\r\n\r\n  .music-length input {\r\n    width: 100%;\r\n    height: 2px;\r\n    margin-top: 10px;\r\n    background: transparent;\r\n\r\n    &[type=range]::-webkit-slider-runnable-track {\r\n      height: 2px;\r\n      margin-top: -7px;\r\n      background: #0d1112;\r\n      // box-shadow: 0 1px 1px #def3f8, inset 0 .125em .125em #0d1112; // 轨道内置阴影效果\r\n    }\r\n\r\n    &[type=range]::-webkit-slider-thumb {\r\n      -webkit-appearance: none;\r\n      height: 10px;\r\n      width: 10px;\r\n      margin-top: -5px;\r\n\r\n      // 使滑块超出轨道部分的偏移量相等\r\n      background: #fff;\r\n      border-radius: 50%;\r\n\r\n      // 外观设置为圆形\r\n      border: solid 0.125em rgba(205, 224, 230, 0.5);\r\n\r\n      // 设置边框\r\n      box-shadow: 0 0.125em 0.125em #3b4547;\r\n\r\n      // 添加底部阴影\r\n    }\r\n\r\n    &[type=range]:focus {\r\n      outline: none;\r\n    }\r\n  }\r\n\r\n  .music-duration {\r\n    padding: 0 10px;\r\n  }\r\n\r\n  .music-voice {\r\n    cursor: pointer;\r\n    position: relative;\r\n    width: 11px;\r\n  }\r\n\r\n  .voice-range {\r\n    transform: rotateZ(-90deg) translate3d(45px, -6px, 0);\r\n    position: absolute;\r\n    top: -4.5px;\r\n    right: -38px;\r\n    padding: 4px 10px;\r\n    cursor: auto;\r\n    z-index: 1000;\r\n    font-size: 0;\r\n    background: #eee;\r\n  }\r\n\r\n  .down-load-file {\r\n    margin-left: 10px;\r\n\r\n    .ivu-icon {\r\n      color: #495060;\r\n    }\r\n  }\r\n}\r\n</style>\r\n"],"sourceRoot":"node_modules/@bairong/jax-core/src/components/BrMusic"}]}