// import * as types from '../mutation-types';
import { http, auth, authRouter, authDirective } from '../../utils';
import Cookies from 'js-cookie';
import _ from 'lodash';

// 用户信息
const state = {
  toolbarList: [], // toolbar 菜单渲染
  userName: '',
  sideList: [],
  updateMenulist: [],
  menuList: [],
  editPasswordStatus: null
};

const _sideList = ({ state, commit, rootState }, data, id) => {
  // console.log(12,id)
  let list2 = [];
  let list3 = [];
  let list = [];
  let list4 = [];
  list2 = data.filter((v, i) => {
    return v.parentId === id;
  });

  list2.sort(function (a, b) {
    return a.sort - b.sort;
  });
  // console.log('28.._sideList..',list2)

  list3 = list2.map((v, i) => {
    // let name = /^\//.test(v.url) ? v.url.replace('/', '') : v.url;
    return {
      id: v.id,
      name: v.name,
      title: v.name,
      children: [],
      sort: v.sort,
      icon: v.icon || 'ios-folder'
    };
  });

  data.forEach((v, i) => {
    if (v.type === 3) {
      list2.forEach((k, j) => {
        if (v.parentId == k.id) {
          let name = /^\//.test(v.url) ? v.url.replace('/', '') : v.url;
          let url = /^\//.test(v.url) ? v.url : '/' + v.url;
          list3[j]['children'].push({
            id: v.id,
            name: name,
            title: v.name,
            path: url,
            sort: v.sort || 0,
            icon: 'ios-paper-outline'
          });
        }
      });
    }
  });

  list3.sort(function (a, b) {
    return a.sort - b.sort;
  });

  list3.forEach((v, i) => {
    if (v.children.length) {
      v.children.sort(function (a, b) {
        return a.sort - b.sort;
      });
    }
  });
  // console.log('68.._sideList..', list3);
  commit('sideList', list3);
};

const actions = {
  queryUserInfo ({ state, commit, rootState }, data) {
    let currentTxt = data.currentTxt;
    return http.get({
      // url : '/userinfo.do',
      url: '/api/auth-service/auth.do',
      data: data,
      success: function (data) {
        if (data.code !== '000000') {
          return false;
        }
        // 判断sessionid 是否更新
        /* let oldSid = Cookies.get('BR_COMPASS_SESSIONID');
        let newSid = data.data.sessionid;
        if(newSid && newSid !== oldSid) {
          Cookies.set('BR_COMPASS_SESSIONID', newSid, { path: '/', domain: '100credit.com' });
        } */
        // 本地权限存储
        auth.setAuth(data.data.resourcesList);
        // 设置路由权限，router时判断
        authRouter.setRouters(data.data.resourcesList);
        // 设置按钮权限，指令
        authDirective.setAuthTree(data.data.resourcesList);

        let toolbarList = data.data.resourcesList.filter((v, i) => {
          return v.parentId === 0;
        });

        let currentId = '';

        toolbarList = toolbarList.map((v, i) => {
          v.classname = v.name === currentTxt ? 'active' : '';
          if (v.name === currentTxt) {
            v.url = 'javascript:void(0)';
            currentId = v.id;
          }
          return v;
        });

        _sideList({ state, commit, rootState }, data.data.resourcesList, currentId);

        toolbarList.sort(function (c, d) {
          return c.sort - d.sort;
        });
        const { apiCode, username } = data.data;
        commit('userName', username);
        commit('toolbarList', toolbarList);
        commit('apiCode', apiCode);
        commit('authData', data.data);
      },
      error: function (res) {
        console.log('error', res);
      }
    });
  },
  // 用户退出
  userQuit: function ({ state, commit, rootState }, data) {
    http.get({
      url: '/api/auth-service/auth/loginOut.do',
      data: data,
      success: function (response) {
        if (response.code === '000000') {
          Cookies.remove('BR_COMPASS_SESSIONID', { path: '/', domain: '100credit.com' });
          auth.destroy();
          window.location.reload();
        }
      },
      error: function () {
        console.log('error');
      }
    });
  },
  editPassword: function ({ state, commit, rootState }, data) {
    http.post({
      url: '/api/auth-service/user/updatePassword.do',
      data: data,
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded'
      },
      success: function (response) {
        // if (response.code === '000000') {
        commit('editPasswordStatus', response);
        // }else{

        // }
      },
      error: function () {
        console.log('error');
      }
    });
  },
  getMenuList: function ({ state, commit, rootState }, data) {
    commit('updateMenulist');
  }
};

const mutations = {
  'authData' (state, data) {
    state.authData = data;
  },
  'userName' (state, data) {
    state.userName = data;
  },
  'toolbarList' (state, data) {
    state.toolbarList = data;
  },
  'sideList' (state, data) {
    state.sideList = data;
  },
  'updateMenulist' (state, data) {
    // state.menuList = appRouter
  },
  'apiCode' (state, data) {
    state.apiCode = data;
  },
  editPasswordStatus (state, data) {
    state.editPasswordStatus = data;
  }
};

const getters = {
  authData: state => state.authData,
  toolbarList: state => {
    return state.toolbarList.map((v, i) => {
      return {
        text: v.name,
        url: v.url,
        classname: v.classname
      };
    });
  },
  apiCode: state => state.apiCode,
  menuList: state => state.menuList,
  editPasswordStatus: state => state.editPasswordStatus
};

export default {
  namespaced: true,
  state,
  actions,
  getters,
  mutations
};
