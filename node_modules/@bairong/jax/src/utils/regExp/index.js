/**
 * ==================================
 * @author HontianYem
 * ==================================
 */

const typeAssign = param => toString.call(param).replace(/(\[|\])/g,'').split(' ')[1];

const arr2Range = arr => {
  if (arr.length === 2 && arr[0] &&arr[1]) {
    return `{${arr[0]},${arr[1]}}`;
  }
  else if (arr.length === 2 && arr[0] && !arr[1]) {
    return `{${arr[0]},}`;
  }
  else {
    return `{${arr[0]}}`;
  }
}

const assignParams = (...p) => {
  switch (typeAssign(p[1])) {
    case 'Array':
      let regStr = p[2]. toString().replace(/(\{\d+\}|\{\d+,\d+\}|\{\d+,\})/, arr2Range(p[1]));
      let regPart = regStr.slice(1, regStr.lastIndexOf('/'));
      let suffix = regStr.slice(regStr.lastIndexOf('/') + 1);
      const reg = new RegExp(regPart, suffix);
      reg.lastIndex = 0;
      return reg.test(p[0]);
    case 'RegExp':
      p[1].lastIndex = 0;
      return p[1].test(p[0]);
    default:
      throw new Error('不支持的参数类型！');
  }
}
/**
 * =====================================================
 * Tip: 正则对像如果带g全局匹配，必须在校验方法内校验前将正则对象lastIndex属性设置为0；
 * 例：r_email = (val, reg = R_EMAIL) => (reg.lastIndex = 0) && reg.test(val);
 * =====================================================
 */

/**
 * @name 手机号
 */
export const R_TEL = /^((0\d{2,3}-\d{7,8})|(1[23456789]\d{9}))$/;
export const r_tel = (val, reg = R_TEL) => (reg.lastIndex = 0) && reg.test(val);

/**
 * @name 邮箱
 */
export const R_EMAIL = /^\w+((-\w+)|(\.\w+))*@[A-Za-z0-9]+((\.|-)[A-Za-z0-9]+)*\.[A-Za-z0-9]+$/g;
export const r_email = (val, reg = R_EMAIL) => (reg.lastIndex = 0) && reg.test(val);

/**
 * @name 密码
 */
export const R_PASSWORD = /^(?![0-9_!@#$%^&*()]+$)(?![a-zA-Z_!@#$%^&*()]+$)(?![_!@#$%^&*()]+$)[0-9A-Za-z_!@#$%^&*()]{6,16}$/g;
export const r_password = (val, param = R_PASSWORD) => assignParams(val, param, R_PASSWORD);

/**
 * @name 输入文本
 * @desc 包含英文、数字、中文,限制10个字符!
 */
export const R_TEXT = /^[\u4E00-\u9FA5a-zA-Z0-9]{2,10}$/;
export const r_text = (val, param = R_TEXT) => assignParams(val, param, R_TEXT);

/**
 * @name 输入文本
 * @desc 包含英文、数字、中文,限制20个字符!
 */
export const R_TEXT2 = /^[\u4E00-\u9FA5a-zA-Z0-9]{2,20}$/;
export const r_text2 = (val, param = R_TEXT2) => assignParams(val, param, R_TEXT2);

/**
 * @name 输入文本
 * @desc 以“中文”开头,包含英文、数字,限制10个字符!
 */
export const R_TEXT3 = /^[\u4E00-\u9FA5][\u4E00-\u9FA5a-zA-Z0-9]{2,10}$/;
export const r_text3 = (val, param = R_TEXT3) => assignParams(val, param, R_TEXT3);

/**
 * @name 输入文本包含中文
 */
export const R_TEXT4 = /[^\x00-\xff]+/g;
export const r_text4 = (val, reg = R_TEXT4) => (reg.lastIndex = 0) && reg.test(val);

/**
 * @name 输入文本包含可以输入2-15位的字母、数字、下划线
 */
export const R_TEXT5 = /^[\w+]{2,15}$/g;
export const r_text5 = (val, param = R_TEXT5) => assignParams(val, param, R_TEXT5);

/**
 * @name 仅可以输入2-15位的汉字 ！
 */
export const R_TEXT6 = /^[\u4e00-\u9fa5·]{2,15}$/g;
export const r_text6 = (val, param = R_TEXT6) => assignParams(val, param, R_TEXT6);

/**
 * @name 仅可以输入2-15位的汉字 ！
 */
export const R_TEXT7 = /\s/g;
export const r_text7 =  (val, reg = R_TEXT7) => (reg.lastIndex = 0) && reg.test(val);

/**
 * 验证16-19位 银行卡号Luhm校验，通过返回空字符串，否则返回相应的错误信息。卡号为空则不进行验证
 * @cardID 输入银行卡号验证
 * @return 验证通过返回空字符串，否则返回相应的错误信息
 * @author hailiang.liu@100credit.com
 * @last modify : 2016/6/21
 */
export const r_bankCard =  bankno => {
  var tip = ''; // 不变验证通过
  var pass = true;		// 不变验证通过,目前没有用到
  /**
   * 银行卡号Luhm校验,Luhm验证通过返回true;否则false
   * 算法：将每个奇数（从右往左顺序）加倍和使它变为单个的数字，如果必要的话通过减去9（或个位和十位相加）和在每个偶数上加上这些值。如果此卡要有效，那么，结果必须是10的倍数。
   * 1.将未带校验位的 15（或18）位卡号从右依次编号 1 到 15（18），位于奇数位号上的数字乘以 2。
   * 2.将奇位乘积的个十位全部相加，再加上所有偶数位上的数字。
   * 3.将加法和加上校验位能被 10 整除。
   * @cardID 输入银行卡号验证    6217003600007164040 建设银行 -- 龙卡通 -- 借记卡    银行卡所在地区: 四川省 -- 德阳
   */
  function luhmCheck (bankno) {
    var lastNum = bankno.substr(bankno.length - 1, 1); // 取出最后一位（与luhm进行比较）

    var first15Num = bankno.substr(0, bankno.length - 1); // 前15或18位
    var newArr = new Array()
    for (var i = first15Num.length - 1; i > -1; i--) { // 前15或18位倒序存进数组
      newArr.push(first15Num.substr(i, 1));
    }
    var arrJiShu = new Array(); // 奇数位*2的积 <9
    var arrJiShu2 = new Array(); // 奇数位*2的积 >9

    var arrOuShu = new Array(); // 偶数位数组
    for (var j = 0; j < newArr.length; j++) {
      if ((j + 1) % 2 == 1) { // 奇数位
        if (parseInt(newArr[j]) * 2 < 9) {
          arrJiShu.push(parseInt(newArr[j]) * 2);
        } else {
          arrJiShu2.push(parseInt(newArr[j]) * 2);
        }
      } else // 偶数位
      {
        arrOuShu.push(newArr[j]);
      }
    }

    var jishu_child1 = new Array()// 奇数位*2 >9 的分割之后的数组个位数
    var jishu_child2 = new Array()// 奇数位*2 >9 的分割之后的数组十位数
    for (var h = 0; h < arrJiShu2.length; h++) {
      jishu_child1.push(parseInt(arrJiShu2[h]) % 10);
      jishu_child2.push(parseInt(arrJiShu2[h]) / 10);
    }

    var sumJiShu = 0; // 奇数位*2 < 9 的数组之和
    var sumOuShu = 0; // 偶数位数组之和
    var sumJiShuChild1 = 0; // 奇数位*2 >9 的分割之后的数组个位数之和
    var sumJiShuChild2 = 0; // 奇数位*2 >9 的分割之后的数组十位数之和
    var sumTotal = 0;
    for (var m = 0; m < arrJiShu.length; m++) {
      sumJiShu = sumJiShu + parseInt(arrJiShu[m]);
    }

    for (var n = 0; n < arrOuShu.length; n++) {
      sumOuShu = sumOuShu + parseInt(arrOuShu[n]);
    }

    for (var p = 0; p < jishu_child1.length; p++) {
      sumJiShuChild1 = sumJiShuChild1 + parseInt(jishu_child1[p]);
      sumJiShuChild2 = sumJiShuChild2 + parseInt(jishu_child2[p]);
    }
    // 计算总和
    sumTotal = parseInt(sumJiShu) + parseInt(sumOuShu) + parseInt(sumJiShuChild1) + parseInt(sumJiShuChild2);

    // 计算Luhm值
    var k = parseInt(sumTotal) % 10 == 0 ? 10 : parseInt(sumTotal) % 10;
    var luhm = 10 - k;

    if (lastNum == luhm) {
      return true// Luhm验证通过
    } else {
      return false// 银行卡号必须符合Luhm校验
    }
  }

  // 开头2位
  var strBin = '10,18,30,35,37,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,60,62,65,68,69,84,87,88,94,95,98,99';
  var reg = /^\d*$/; // 全数字
  bankno = '' + bankno;
  // 是否为空  银行卡号为空则不进行验证
  if (bankno == '' || bankno == undefined || bankno == null) {
    /* tip = '银行卡号不能为空';
            pass = false; */
    tip = '';
    pass = true;
  }
  // 开头2位
  else if (strBin.indexOf(bankno.substring(0, 2)) == -1) {
    tip = '前2位校验错误，请重新输入';
    pass = false;
  }
  // 类型
  else if (!reg.test(bankno)) {
    tip = '必须全为数字，请重新输入';
    pass = false
  }
  // 校验长度
  else if (bankno.length < 16 || bankno.length > 19) {
    var reg = /^\d*$/; // 全数字
    tip = '请输入16至19位卡号(目前' + bankno.length + '位)';
    pass = false;
  }
  // 银行卡号必须符合Luhm校验
  else if (luhmCheck(bankno) === false) {
    tip = '校验错误，请重新输入';
    pass = false;
  }
  // return tip
  return !tip;
};

export default {
  // 正则常量
  R_TEL,
  R_EMAIL,
  R_PASSWORD,
  R_TEXT,
  R_TEXT2,
  R_TEXT3,
  R_TEXT4,
  R_TEXT5,
  R_TEXT6,
  R_TEXT7,
  // 校验方法
  r_tel,
  r_email,
  r_password,
  r_bankCard,
  r_text,
  r_text2,
  r_text3,
  r_text4,
  r_text5,
  r_text6,
  r_text7
};

