'use strict';
import Cookies from 'js-cookie';
import qs from 'qs';
import { httpApi } from '@bairong/jax-core';

/**
 * http参数可配置
 * @type {{DOMAIN: string, LOGIN_PAGE: string, SESSION_KEY: string, ISQUERYSID: boolean}}
 */
let http = {
  LOGIN_PAGE: '//auth.100credit.com/#/login/',
  DOMAIN: '100credit.com',
  SESSION_KEY: 'BR_COMPASS_SESSIONID',
  ISQUERYSID: true
};

/**
 * input '/#/userReport/4001212_20190326153940_4652/E9EACCA03312BBD8AC9D6F4E1CBFE05B/| /#/userReport/4001212_20190326153940_4652/E9EACCA03312BBD8AC9D6F4E1CBFE05B'
 * @type {{getSid: (function(*): *), getHashs: (function(): string[]), isUserReport: (function(*): boolean)}}
 */
const hasher = {
  getHashs: () => {
    const url = window.location.href;
    const hash = window.location.href.indexOf('#');
    const hashString = hash < 0 ? '' : decodeURIComponent(url.substr(hash + 1, url.length));
    const hashArray = hashString.split('/');
    return hashArray.filter((h) => {
      return h !== '';
    });
  },
  isUserReport: (hashs) => {
    const filterUserReport = hashs.filter((h) => {
      return h === 'userReport';
    });
    return filterUserReport.length > 0;
  },
  getSid: (hashs) => {
    return hashs[2];
  }
};
/**
 * 取得hashs
 * @type {*|T[]}
 */
const hashs = hasher.getHashs();

/**
 * 是否为嵌入式报告
 */
const isUserReport = hasher.isUserReport(hashs);

/**
 * 嵌入式报告sessionId
 */
const hashSid = hasher.getSid(hashs);

/**
 * 设计状态拦截，可根据业务设置统一拦截
 * @param data
 */
const statusFilter = function (data) {
  const { data: { code } } = data;
  switch (code) {
    case '100013':
      if (!isUserReport) {
        let option = http.DOMAIN === '100credit.com' ? { path: '', domain: http.DOMAIN } : { path: '' };
        Cookies.remove(http.SESSION_KEY, option);
        let { hash, hostname } = location;
        if (hash && hash.indexOf('#/login') === -1) {
          let domain = hostname.match(/(?:\w+\.)/)[0].replace('.', '');
          location.href = http.LOGIN_PAGE + domain;
        }
      }
      break;
    case '100014':
      if (!isUserReport) {
        // location.href = '//auth.100credit.com/#/login/apiservice';
      }
      break;
  }
};
/**
 * 设置url+t,解决IE缓存； sessionId支持query and headers 传参
 * @param params
 * @returns {{headers: any, url: string}}
 * @private
 */
const _getSession = params => {
  /**
   * 如是嵌入式取hashid,否则取cookie
   * @type {string | string}
   */
  const sid = !isUserReport ? (Cookies.get(http.SESSION_KEY) || '') : hashSid;
  /**
   * 是否query传sessionId
   */
  const query = !http.ISQUERYSID ? { t: Date.parse(new Date()) / 1000 } : { sessionId: sid, t: Date.parse(new Date()) / 1000 };
  /**
   * url + t，解决IE GET请求缓存兼容
   * @type {string}
   */
  const url = params.url + '?' + qs.stringify(query);
  /**
   * headers传sessionId,可拼接其他参数
   * @type {any}
   */
  const headers = Object.assign({ 'sessionId': sid }, params.headers);
  return { url: url, headers: headers };
};
/**
 *  post (url, data)
 * @param params
 * @returns {Promise<T | never>}
 */
http.post = params => {
  const { url, headers } = _getSession(params);
  const _options = Object.assign({}, params, { method: 'post', url: url, headers: headers, statusFilter: statusFilter });
  return httpApi(_options);
};

/**
 * get (url, params)
 * @param params
 * @returns {Promise<T | never>}
 */
http.get = params => {
  const { url, headers } = _getSession(params);
  const _options = Object.assign({}, params, { method: 'get', url: url, headers: headers, statusFilter: statusFilter });
  return httpApi(_options);
};

export default http;
