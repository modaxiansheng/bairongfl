import qs from 'qs';
import axios from 'axios';

/**
 * 状态拦截
 * @private
 */
let _statusFilter = () => {};

axios.interceptors.request.use(config => {
  return config;
}, error => {
  return Promise.reject(error);
});

axios.interceptors.response.use(response => {
  let data = null;
  if (response.data === undefined) {
    data = { data: JSON.parse(response.request.responseText || '{}'), status: response.request.status };
  } else {
    data = response;
  }
  /**
   * 判断是否设置状态拦截
   */
  if (data && Object.prototype.toString.call(_statusFilter) === '[object Function]') {
    _statusFilter(data);
  }
  return data;
}, error => {
  return Promise.resolve(error.response);
});
/**
 * 默认axios参数
 * @type {{headers: {'X-Requested-With': string, 'Content-Type': string}, baseURL: string, responseType: string, method: string, data: {}, success: null, params: string, error: null, url: string, timeout: number}}
 */
let defaultOptions = {
  method: 'get',
  baseURL: '/',
  url: '',
  headers: { 'X-Requested-With': 'XMLHttpRequest', 'Content-Type': 'application/json' },
  responseType: 'json', // 响应格式：可选项 'arraybuffer', 'blob', 'document', 'json', 'text', 'stream'
  data: {},
  params: '',
  timeout: 10000,
  success: null,
  error: null
};
/**
 * 参数设置
 * @param params
 * @returns {{} & {headers: {'X-Requested-With': string, 'Content-Type': string}, baseURL: string, responseType: string, method: string, data: {}, success: null, params: string, error: null, url: string, timeout: number} & {headers: *, baseURL: string, responseType: *, statusFilter: *, method: *, success: *, error: *, url: *, timeout: *}}
 */
const getOptions = params => {
  const { method, url, headers, responseType, data, success, error, timeout, statusFilter } = params;
  let _options = {
    method: method,
    baseURL: '/',
    url: url,
    timeout: timeout,
    responseType: responseType,
    headers: headers,
    success: success,
    error: error,
    statusFilter: statusFilter
  };
  /**
   * 状态拦截引用
   */
  _statusFilter = statusFilter;
  // get: params, post: data
  if (params.method !== 'post') {
    _options.params = data;
  } else {
    /**
     * 如果是www-form，data stringify
     * @type {string}
     */
    _options.data = params.headers && params.headers['Content-Type'] === 'application/x-www-form-urlencoded' ? qs.stringify(params.data) : params.data;
  }
  const options = Object.assign({}, defaultOptions, _options);
  return options;
};
const httpApi = params => {
  const options = getOptions(params);
  const { success, error } = options;
  return axios(options).then(
    (response) => {
      const { status, data } = response;
      if (response && (status === 200 || status === 304 || status === 400)) {
        return success ? success(data) : data;
      } else {
        return error ? error(response ? data : null) : (response ? data : null);
      }
    }
  ).catch(
    (res) => {
      return error ? error(res) : res;
    }
  );
};

export default httpApi;
